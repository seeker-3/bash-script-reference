"use strict";(self.webpackChunkbash_script_reference=self.webpackChunkbash_script_reference||[]).push([[430],{8666:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>o,frontMatter:()=>c,metadata:()=>i,toc:()=>t});const i=JSON.parse('{"id":"reference","title":"Full Reference","description":"- Full Reference","source":"@site/docs/100-reference.md","sourceDirName":".","slug":"/reference","permalink":"/bash-script-reference/docs/reference","draft":false,"unlisted":false,"editUrl":"https://github.com/seeker-3/bash-script-reference/tree/main/docs/100-reference.md","tags":[],"version":"current","sidebarPosition":100,"frontMatter":{},"sidebar":"referenceSidebar","previous":{"title":"Bonus","permalink":"/bash-script-reference/docs/bonus"}}');var r=s(6070),l=s(5658);const c={},a="Full Reference",d={},t=[{value:"Helpful References",id:"helpful-references",level:2},{value:"Basics",id:"basics",level:2},{value:"Comments",id:"comments",level:3},{value:"Variables",id:"variables",level:3},{value:"Declaring Variables <code>VAR=x</code>",id:"declaring-variables-varx",level:4},{value:"Referencing Variables <code>$VAR</code>",id:"referencing-variables-var",level:4},{value:"Variable Interpolation",id:"variable-interpolation",level:4},{value:"Running Commands",id:"running-commands",level:3},{value:"Word Splitting (Biggest Footgun)",id:"word-splitting-biggest-footgun",level:2},{value:"Strings",id:"strings",level:2},{value:"Raw Strings <code>&#39;...&#39;</code>",id:"raw-strings-",level:3},{value:"Interpolated Strings <code>&quot;...$X...&quot;</code>",id:"interpolated-strings-x",level:3},{value:"Expanded Strings <code>hello/world</code>",id:"expanded-strings-helloworld",level:3},{value:"ANSI-C Escape Strings <code>$&#39;...\\n&#39;</code>",id:"ansi-c-escape-strings-n",level:3},{value:"Multiline Strings",id:"multiline-strings",level:3},{value:"String Word Splitting (Not Recommended)",id:"string-word-splitting-not-recommended",level:3},{value:"String Concatenation <code>+=</code>",id:"string-concatenation-",level:3},{value:"String Composition <code>&#39;...&#39;&quot;...&quot;</code>",id:"string-composition-",level:3},{value:"String Slices <code>${STRING:start:end}</code>",id:"string-slices-stringstartend",level:3},{value:"String Length",id:"string-length",level:3},{value:"Arrays",id:"arrays",level:2},{value:"Declaring Arrays <code>ARRAY=(...)</code>",id:"declaring-arrays-array",level:3},{value:"Indexing Arrays <code>${ARRAY[i]}</code>",id:"indexing-arrays-arrayi",level:3},{value:"Array Expansion to Separate Strings <code>${ARRAY[@]}</code>",id:"array-expansion-to-separate-strings-array",level:3},{value:"Array Expansion to a Single String <code>${ARRAY[*]}</code>",id:"array-expansion-to-a-single-string-array",level:3},{value:"Array Keys <code>${!ARRAY[@]}</code>",id:"array-keys-array",level:3},{value:"Array Length",id:"array-length",level:3},{value:"Array Concatenation <code>ARRAY2=(&quot;${ARRAY[@]}&quot; &quot;${ARRAY[@]}&quot;)</code>",id:"array-concatenation-array2array-array",level:3},{value:"Array Slices <code>${ARRAY[@]:start:length}</code>",id:"array-slices-arraystartlength",level:3},{value:"Array Iteration <code>for ... in ${ARRAY[@]}</code>",id:"array-iteration-for--in-array",level:3},{value:"Splitting Strings into Arrays",id:"splitting-strings-into-arrays",level:3},{value:"Practical Uses of Arrays",id:"practical-uses-of-arrays",level:3},{value:"Dictionaries",id:"dictionaries",level:2},{value:"Declaring Dictionaries",id:"declaring-dictionaries",level:3},{value:"Dictionary Expansions",id:"dictionary-expansions",level:3},{value:"Globbing",id:"globbing",level:2},{value:"Wildcards <code>*</code>",id:"wildcards-",level:3},{value:"Directory Wildcards <code>**/pattern</code>",id:"directory-wildcards-pattern",level:3},{value:"Single Character <code>?</code>",id:"single-character-",level:3},{value:"Single Character Ranges <code>[...]</code>",id:"single-character-ranges-",level:3},{value:"Extended Globbing",id:"extended-globbing",level:3},{value:"Match Zero or One Pattern List <code>?(pattern-list)</code>",id:"match-zero-or-one-pattern-list-pattern-list",level:4},{value:"Match Zero or More Pattern List <code>*(pattern-list)</code>",id:"match-zero-or-more-pattern-list-pattern-list",level:4},{value:"Match One or More Pattern List <code>+(pattern-list)</code>",id:"match-one-or-more-pattern-list-pattern-list",level:4},{value:"Match One of the Pattern List <code>@(pattern-list)</code>",id:"match-one-of-the-pattern-list-pattern-list",level:4},{value:"Match Anything Except One of the Pattern List <code>!(pattern-list)</code>",id:"match-anything-except-one-of-the-pattern-list-pattern-list",level:4},{value:"Globbing Options <code>shopt -s option</code>",id:"globbing-options-shopt--s-option",level:3},{value:"Special Parameters <code>$@</code>, <code>$*</code>, <code>$#</code>, <code>$?</code>, <code>$$</code>, <code>$!</code>",id:"special-parameters------",level:2},{value:"Command Line Arguments",id:"command-line-arguments",level:3},{value:"Command Line Arguments as an Array <code>$@</code>",id:"command-line-arguments-as-an-array-",level:4},{value:"Command Line Arguments as a String <code>$*</code>",id:"command-line-arguments-as-a-string-",level:4},{value:"Get the Number of Command Line Arguments <code>$#</code>",id:"get-the-number-of-command-line-arguments-",level:4},{value:"Access Individual Command Line Arguments <code>$n</code>",id:"access-individual-command-line-arguments-n",level:4},{value:"Get the Name of the Script <code>$0</code>",id:"get-the-name-of-the-script-0",level:4},{value:"Process Introspection",id:"process-introspection",level:3},{value:"Subshells <code>()</code>",id:"subshells-",level:2},{value:"Command Groups <code>{}</code>",id:"command-groups-",level:3},{value:"Command Substitution <code>$(...)</code>",id:"command-substitution-",level:3},{value:"Process Substitution <code>&lt;(...)</code>",id:"process-substitution-",level:3},{value:"Control Flow",id:"control-flow",level:2},{value:"If Statements",id:"if-statements",level:3},{value:"For Loops",id:"for-loops",level:3},{value:"While Loops",id:"while-loops",level:3},{value:"Case Statements",id:"case-statements",level:3},{value:"Conditionals",id:"conditionals",level:2},{value:"<code>(())</code>",id:"",level:3},{value:"<code>[[]]</code>",id:"-1",level:3},{value:"<code>[]</code>",id:"-2",level:3},{value:"<code>test</code>",id:"test",level:3},{value:"&quot;Booleans&quot;",id:"booleans",level:3},{value:"Regex <code>=~</code>",id:"regex-",level:3},{value:"Functions",id:"functions",level:2},{value:"Defining Functions <code>fn() { ... }</code>",id:"defining-functions-fn---",level:3},{value:"Calling Functions <code>fn</code>",id:"calling-functions-fn",level:3},{value:"Calling Functions with Arguments <code>fn 1 2 3</code>",id:"calling-functions-with-arguments-fn-1-2-3",level:3},{value:"Using Functions Arguments <code>&quot;$@&quot;</code>",id:"using-functions-arguments-",level:3},{value:"Returning Exit Codes <code>return</code>",id:"returning-exit-codes-return",level:3},{value:"&quot;Returning&quot; Values <code>echo -n ...</code>",id:"returning-values-echo--n-",level:3},{value:"Brackets vs. Parentheses",id:"brackets-vs-parentheses",level:3},{value:"Pipes",id:"pipes",level:2},{value:"Pipe STDOUT to STDIN <code>|</code>",id:"pipe-stdout-to-stdin-",level:3},{value:"Pipe STDOUT and STDERR to STDIN <code>|&amp;</code>",id:"pipe-stdout-and-stderr-to-stdin-",level:3},{value:"Redirects",id:"redirects",level:2},{value:"Read a File to STDIN <code>&lt;</code>",id:"read-a-file-to-stdin-",level:3},{value:"Read a String to STDIN <code>&lt;&lt;&lt;</code>",id:"read-a-string-to-stdin-",level:3},{value:"Write to a File from STDOUT <code>&gt;</code>",id:"write-to-a-file-from-stdout-",level:3},{value:"Append to a File from STDOUT <code>&gt;&gt;</code>",id:"append-to-a-file-from-stdout-",level:3},{value:"File Descriptors",id:"file-descriptors",level:3},{value:"Open a File <code>exec fd&lt;&gt;file.txt</code>",id:"open-a-file-exec-fdfiletxt",level:3},{value:"Close a File <code>exec fd&gt;&amp;-</code>",id:"close-a-file-exec-fd-",level:3},{value:"Arithmetic Expansions <code>((x+=y))</code>",id:"arithmetic-expansions-xy",level:2},{value:"Expansions",id:"expansions",level:2},{value:"Ranges <code>{start..stop..step}</code>",id:"ranges-startstopstep",level:3},{value:"Brace Expansions <code>prefix{middle1,middle2,}suffix</code>",id:"brace-expansions-prefixmiddle1middle2suffix",level:3},{value:"Parameter Expansions <code>VAR2=${VAR...}</code>",id:"parameter-expansions-var2var",level:3},{value:"Tilde Expansion <code>~</code>",id:"tilde-expansion-",level:3},{value:"Strict Mode",id:"strict-mode",level:2},{value:"Running Scripts",id:"running-scripts",level:2},{value:"Running Scripts as Files",id:"running-scripts-as-files",level:3},{value:"Running Scripts as Strings",id:"running-scripts-as-strings",level:3},{value:"Running Script Strings through STDIN",id:"running-script-strings-through-stdin",level:4},{value:"Running Script Strings with <code>bash -c</code>",id:"running-script-strings-with-bash--c",level:4},{value:"Running Script Strings with Process Substitution <code>bash &lt;(...)</code>",id:"running-script-strings-with-process-substitution-bash-",level:4},{value:"Adding Color to Your Bash Scripts",id:"adding-color-to-your-bash-scripts",level:2},{value:"Debugging with <code>bash -x</code>",id:"debugging-with-bash--x",level:2},{value:"Helpful Tools",id:"helpful-tools",level:2},{value:"<code>shfmt</code> a shell script formatter",id:"shfmt-a-shell-script-formatter",level:3},{value:"<code>shellcheck</code> a shell script linter",id:"shellcheck-a-shell-script-linter",level:3}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"full-reference",children:"Full Reference"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#full-reference",children:"Full Reference"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#helpful-references",children:"Helpful References"})}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#basics",children:"Basics"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#comments",children:"Comments"})}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#variables",children:"Variables"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#declaring-variables-varx",children:["Declaring Variables ",(0,r.jsx)(n.code,{children:"VAR=x"})]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#referencing-variables-var",children:["Referencing Variables ",(0,r.jsx)(n.code,{children:"$VAR"})]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#variable-interpolation",children:"Variable Interpolation"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#running-commands",children:"Running Commands"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#word-splitting-biggest-footgun",children:"Word Splitting (Biggest Footgun)"})}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#strings",children:"Strings"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#raw-strings-",children:["Raw Strings ",(0,r.jsx)(n.code,{children:"'...'"})]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#interpolated-strings-x",children:["Interpolated Strings ",(0,r.jsx)(n.code,{children:'"...$X..."'})]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#expanded-strings-helloworld",children:["Expanded Strings ",(0,r.jsx)(n.code,{children:"hello/world"})]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#ansi-c-escape-strings-n",children:["ANSI-C Escape Strings ",(0,r.jsx)(n.code,{children:"$'...\\n'"})]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#multiline-strings",children:"Multiline Strings"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#string-word-splitting-not-recommended",children:"String Word Splitting (Not Recommended)"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#string-concatenation-",children:["String Concatenation ",(0,r.jsx)(n.code,{children:"+="})]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#string-composition-",children:["String Composition ",(0,r.jsx)(n.code,{children:"'...'\"...\""})]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#string-slices-stringstartend",children:["String Slices ",(0,r.jsx)(n.code,{children:"${STRING:start:end}"})]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#string-length",children:"String Length"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#arrays",children:"Arrays"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#declaring-arrays-array",children:["Declaring Arrays ",(0,r.jsx)(n.code,{children:"ARRAY=(...)"})]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#indexing-arrays-arrayi",children:["Indexing Arrays ",(0,r.jsx)(n.code,{children:"${ARRAY[i]}"})]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#array-expansion-to-separate-strings-array",children:["Array Expansion to Separate Strings ",(0,r.jsx)(n.code,{children:"${ARRAY[@]}"})]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#array-expansion-to-a-single-string-array",children:["Array Expansion to a Single String ",(0,r.jsx)(n.code,{children:"${ARRAY[*]}"})]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#array-keys-array",children:["Array Keys ",(0,r.jsx)(n.code,{children:"${!ARRAY[@]}"})]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#array-length",children:"Array Length"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#array-concatenation-array2array-array",children:["Array Concatenation ",(0,r.jsx)(n.code,{children:'ARRAY2=("${ARRAY[@]}" "${ARRAY[@]}")'})]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#array-slices-arraystartlength",children:["Array Slices ",(0,r.jsx)(n.code,{children:"${ARRAY[@]:start:length}"})]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#array-iteration-for--in-array",children:["Array Iteration ",(0,r.jsx)(n.code,{children:"for ... in ${ARRAY[@]}"})]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#splitting-strings-into-arrays",children:"Splitting Strings into Arrays"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#practical-uses-of-arrays",children:"Practical Uses of Arrays"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#dictionaries",children:"Dictionaries"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#declaring-dictionaries",children:"Declaring Dictionaries"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#dictionary-expansions",children:"Dictionary Expansions"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#globbing",children:"Globbing"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#wildcards-",children:["Wildcards ",(0,r.jsx)(n.code,{children:"*"})]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#directory-wildcards-pattern",children:["Directory Wildcards ",(0,r.jsx)(n.code,{children:"**/pattern"})]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#single-character-",children:["Single Character ",(0,r.jsx)(n.code,{children:"?"})]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#single-character-ranges-",children:["Single Character Ranges ",(0,r.jsx)(n.code,{children:"[...]"})]})}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#extended-globbing",children:"Extended Globbing"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#match-zero-or-one-pattern-list-pattern-list",children:["Match Zero or One Pattern List ",(0,r.jsx)(n.code,{children:"?(pattern-list)"})]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#match-zero-or-more-pattern-list-pattern-list",children:["Match Zero or More Pattern List ",(0,r.jsx)(n.code,{children:"*(pattern-list)"})]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#match-one-or-more-pattern-list-pattern-list",children:["Match One or More Pattern List ",(0,r.jsx)(n.code,{children:"+(pattern-list)"})]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#match-one-of-the-pattern-list-pattern-list",children:["Match One of the Pattern List ",(0,r.jsx)(n.code,{children:"@(pattern-list)"})]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#match-anything-except-one-of-the-pattern-list-pattern-list",children:["Match Anything Except One of the Pattern List ",(0,r.jsx)(n.code,{children:"!(pattern-list)"})]})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#globbing-options-shopt--s-option",children:["Globbing Options ",(0,r.jsx)(n.code,{children:"shopt -s option"})]})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.a,{href:"#special-parameters------",children:["Special Parameters ",(0,r.jsx)(n.code,{children:"$@"}),", ",(0,r.jsx)(n.code,{children:"$*"}),", ",(0,r.jsx)(n.code,{children:"$#"}),", ",(0,r.jsx)(n.code,{children:"$?"}),", ",(0,r.jsx)(n.code,{children:"$$"}),", ",(0,r.jsx)(n.code,{children:"$!"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#command-line-arguments",children:"Command Line Arguments"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#command-line-arguments-as-an-array-",children:["Command Line Arguments as an Array ",(0,r.jsx)(n.code,{children:"$@"})]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#command-line-arguments-as-a-string-",children:["Command Line Arguments as a String ",(0,r.jsx)(n.code,{children:"$*"})]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#get-the-number-of-command-line-arguments-",children:["Get the Number of Command Line Arguments ",(0,r.jsx)(n.code,{children:"$#"})]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#access-individual-command-line-arguments-n",children:["Access Individual Command Line Arguments ",(0,r.jsx)(n.code,{children:"$n"})]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#get-the-name-of-the-script-0",children:["Get the Name of the Script ",(0,r.jsx)(n.code,{children:"$0"})]})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#process-introspection",children:"Process Introspection"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.a,{href:"#subshells-",children:["Subshells ",(0,r.jsx)(n.code,{children:"()"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#command-groups-",children:["Command Groups ",(0,r.jsx)(n.code,{children:"{}"})]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#command-substitution-",children:["Command Substitution ",(0,r.jsx)(n.code,{children:"$(...)"})]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#process-substitution-",children:["Process Substitution ",(0,r.jsx)(n.code,{children:"<(...)"})]})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#control-flow",children:"Control Flow"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#if-statements",children:"If Statements"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#for-loops",children:"For Loops"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#while-loops",children:"While Loops"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#case-statements",children:"Case Statements"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#conditionals",children:"Conditionals"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#",children:(0,r.jsx)(n.code,{children:"(())"})})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#-1",children:(0,r.jsx)(n.code,{children:"[[]]"})})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#-2",children:(0,r.jsx)(n.code,{children:"[]"})})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#test",children:(0,r.jsx)(n.code,{children:"test"})})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#booleans",children:'"Booleans"'})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#regex-",children:["Regex ",(0,r.jsx)(n.code,{children:"=~"})]})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#functions",children:"Functions"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#defining-functions-fn---",children:["Defining Functions ",(0,r.jsx)(n.code,{children:"fn() { ... }"})]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#calling-functions-fn",children:["Calling Functions ",(0,r.jsx)(n.code,{children:"fn"})]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#calling-functions-with-arguments-fn-1-2-3",children:["Calling Functions with Arguments ",(0,r.jsx)(n.code,{children:"fn 1 2 3"})]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#using-functions-arguments-",children:["Using Functions Arguments ",(0,r.jsx)(n.code,{children:'"$@"'})]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#returning-exit-codes-return",children:["Returning Exit Codes ",(0,r.jsx)(n.code,{children:"return"})]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#returning-values-echo--n-",children:['"Returning" Values ',(0,r.jsx)(n.code,{children:"echo -n ..."})]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#brackets-vs-parentheses",children:"Brackets vs. Parentheses"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#pipes",children:"Pipes"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#pipe-stdout-to-stdin-",children:["Pipe STDOUT to STDIN ",(0,r.jsx)(n.code,{children:"|"})]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#pipe-stdout-and-stderr-to-stdin-",children:["Pipe STDOUT and STDERR to STDIN ",(0,r.jsx)(n.code,{children:"|&"})]})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#redirects",children:"Redirects"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#read-a-file-to-stdin-",children:["Read a File to STDIN ",(0,r.jsx)(n.code,{children:"<"})]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#read-a-string-to-stdin-",children:["Read a String to STDIN ",(0,r.jsx)(n.code,{children:"<<<"})]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#write-to-a-file-from-stdout-",children:["Write to a File from STDOUT ",(0,r.jsx)(n.code,{children:">"})]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#append-to-a-file-from-stdout-",children:["Append to a File from STDOUT ",(0,r.jsx)(n.code,{children:">>"})]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#file-descriptors",children:"File Descriptors"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#open-a-file-exec-fdfiletxt",children:["Open a File ",(0,r.jsx)(n.code,{children:"exec fd<>file.txt"})]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#close-a-file-exec-fd-",children:["Close a File ",(0,r.jsx)(n.code,{children:"exec fd>&-"})]})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#arithmetic-expansions-xy",children:["Arithmetic Expansions ",(0,r.jsx)(n.code,{children:"((x+=y))"})]})}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#expansions",children:"Expansions"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#ranges-startstopstep",children:["Ranges ",(0,r.jsx)(n.code,{children:"{start..stop..step}"})]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#brace-expansions-prefixmiddle1middle2suffix",children:["Brace Expansions ",(0,r.jsx)(n.code,{children:"prefix{middle1,middle2,}suffix"})]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#parameter-expansions-var2var",children:["Parameter Expansions ",(0,r.jsx)(n.code,{children:"VAR2=${VAR...}"})]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#tilde-expansion-",children:["Tilde Expansion ",(0,r.jsx)(n.code,{children:"~"})]})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#strict-mode",children:"Strict Mode"})}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#running-scripts",children:"Running Scripts"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#running-scripts-as-files",children:"Running Scripts as Files"})}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#running-scripts-as-strings",children:"Running Scripts as Strings"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#running-script-strings-through-stdin",children:"Running Script Strings through STDIN"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#running-script-strings-with-bash--c",children:["Running Script Strings with ",(0,r.jsx)(n.code,{children:"bash -c"})]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#running-script-strings-with-process-substitution-bash-",children:["Running Script Strings with Process Substitution ",(0,r.jsx)(n.code,{children:"bash <(...)"})]})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#adding-color-to-your-bash-scripts",children:"Adding Color to Your Bash Scripts"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#debugging-with-bash--x",children:["Debugging with ",(0,r.jsx)(n.code,{children:"bash -x"})]})}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#helpful-tools",children:"Helpful Tools"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#shfmt-a-shell-script-formatter",children:[(0,r.jsx)(n.code,{children:"shfmt"})," a shell script formatter"]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#shellcheck-a-shell-script-linter",children:[(0,r.jsx)(n.code,{children:"shellcheck"})," a shell script linter"]})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"helpful-references",children:"Helpful References"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://devhints.io/bash",children:"Bash cheatsheet"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://www.gnu.org/software/bash/manual/bash.html",children:"Official bash manual"})}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"basics",children:"Basics"}),"\n",(0,r.jsx)(n.h3,{id:"comments",children:"Comments"}),"\n",(0,r.jsxs)(n.p,{children:["Comments are lines that start with a ",(0,r.jsx)(n.code,{children:"#"})," character. Bash does not support multi-line comments."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# This is a comment\n"})}),"\n",(0,r.jsx)(n.h3,{id:"variables",children:"Variables"}),"\n",(0,r.jsxs)(n.h4,{id:"declaring-variables-varx",children:["Declaring Variables ",(0,r.jsx)(n.code,{children:"VAR=x"})]}),"\n",(0,r.jsxs)(n.p,{children:["Declare variables using ",(0,r.jsx)(n.code,{children:"="}),". Variables cannot have spaces around the ",(0,r.jsx)(n.code,{children:"="})," sign."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"X=1\n"})}),"\n",(0,r.jsxs)(n.h4,{id:"referencing-variables-var",children:["Referencing Variables ",(0,r.jsx)(n.code,{children:"$VAR"})]}),"\n",(0,r.jsxs)(n.p,{children:["Reference a variable using the ",(0,r.jsx)(n.code,{children:"$"})," sign."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"X2=$X\n"})}),"\n",(0,r.jsx)(n.p,{children:"Variables in bash are commonly written in upper snake case by convention"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"MY_VARIABLE=1\necho $MY_VARIABLE # 1\n"})}),"\n",(0,r.jsx)(n.h4,{id:"variable-interpolation",children:"Variable Interpolation"}),"\n",(0,r.jsx)(n.h3,{id:"running-commands",children:"Running Commands"}),"\n",(0,r.jsx)(n.p,{children:"By default, anything typed on a line will be executed as a command."}),"\n",(0,r.jsxs)(n.p,{children:["If you want to run a command that spans multiple lines, you can use a backslash ",(0,r.jsx)(n.code,{children:"\\"})," to escape the newline."]}),"\n",(0,r.jsx)(n.h2,{id:"word-splitting-biggest-footgun",children:"Word Splitting (Biggest Footgun)"}),"\n",(0,r.jsx)(n.h2,{id:"strings",children:"Strings"}),"\n",(0,r.jsx)(n.p,{children:"The only primitive datatype in bash is a string (numbers are really just strings!). There are several different ways to define strings."}),"\n",(0,r.jsxs)(n.h3,{id:"raw-strings-",children:["Raw Strings ",(0,r.jsx)(n.code,{children:"'...'"})]}),"\n",(0,r.jsxs)(n.p,{children:["Every character in the string is treated as a literal, no escape sequences, no variable interpolation, whitespace is preserved, ",(0,r.jsx)(n.code,{children:"~"})," does not expand."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"RAW='hello\\nworld $X'\necho \"$RAW\" # hello\\nworld $X\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"interpolated-strings-x",children:["Interpolated Strings ",(0,r.jsx)(n.code,{children:'"...$X..."'})]}),"\n",(0,r.jsxs)(n.p,{children:["Variables and [subshells] are interpolated, interpolation can be escaped, whitespace is preserved, ",(0,r.jsx)(n.code,{children:"~"})," does not expand."]}),"\n",(0,r.jsxs)(n.p,{children:["Escapable: ",(0,r.jsx)(n.code,{children:"\\$"}),", ",(0,r.jsx)(n.code,{children:'\\"'}),", ",(0,r.jsx)(n.code,{children:"\\\\"}),", `\\``"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"X=1\nINTERPOLATED='hello\\nworld $X'\necho \"$INTERPOLATED\" # hello\\nworld 1\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"expanded-strings-helloworld",children:["Expanded Strings ",(0,r.jsx)(n.code,{children:"hello/world"})]}),"\n",(0,r.jsxs)(n.p,{children:["Variables and [subshells] are interpolated, ",(0,r.jsx)(n.code,{children:"~"})," expands, whitespace is not allowed, syntax characters like ",(0,r.jsx)(n.code,{children:"("}),", ",(0,r.jsx)(n.code,{children:")"}),", ",(0,r.jsx)(n.code,{children:"<"}),", ",(0,r.jsx)(n.code,{children:">"}),", ",(0,r.jsx)(n.code,{children:"|"}),", ",(0,r.jsx)(n.code,{children:";"})," are not allowed."]}),"\n",(0,r.jsxs)(n.p,{children:["Syntax characters and whitespace can be escaped with ",(0,r.jsx)(n.code,{children:"\\"})," but it is probably better to use quoted strings instead of many escapes."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"WORLD=' world'\nEXPANDED=~/hello$WORLD\necho \"$EXPANDED\" # /home/user/hello world\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"ansi-c-escape-strings-n",children:["ANSI-C Escape Strings ",(0,r.jsx)(n.code,{children:"$'...\\n'"})]}),"\n",(0,r.jsx)(n.p,{children:"Similar to raw strings except ansi escape sequences are allowed."}),"\n",(0,r.jsxs)(n.p,{children:["Variables are not interpolated, whitespace is preserved, ",(0,r.jsx)(n.code,{children:"~"})," is not expanded, supports standard escape sequences like ",(0,r.jsx)(n.code,{children:"\\n"}),", ",(0,r.jsx)(n.code,{children:"\\t"}),", ",(0,r.jsx)(n.code,{children:"\\r"}),", etc."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"ESCAPED=$'hello\\nworld $X'\necho \"$ESCAPED\" # hello\n#world $X\n"})}),"\n",(0,r.jsx)(n.h3,{id:"multiline-strings",children:"Multiline Strings"}),"\n",(0,r.jsx)(n.p,{children:"All quoted strings by default are multiline strings."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"RAW='hello\nworld'\n\nINTERPOLATED=\"hello\nworld\"\n\nESCAPED=$'hello\nworld'\n"})}),"\n",(0,r.jsx)(n.h3,{id:"string-word-splitting-not-recommended",children:"String Word Splitting (Not Recommended)"}),"\n",(0,r.jsx)(n.p,{children:"By default, if strings are not quoted, they will be expanded: [globs] will be evaluated, whitespace will collapse, and the string will be interpreted as multiple strings delimited by whitespace. It is recommended to quote your strings to prevent unwanted expansion, unless you know for certain it will not expand. Use [shell check] to help with this."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"RAW='hello   world'\necho $RAW # 'hello' 'world'\n\necho \"$RAW\" # 'hello   world'\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"string-concatenation-",children:["String Concatenation ",(0,r.jsx)(n.code,{children:"+="})]}),"\n",(0,r.jsxs)(n.p,{children:["Strings can be concatenated using the ",(0,r.jsx)(n.code,{children:"+="})," operator."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"VAR=hello\nVAR+=' world'\necho \"$VAR\" # hello world\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Note that bash is unique in that you can use ",(0,r.jsx)(n.code,{children:"+="})," but cannot use ",(0,r.jsx)(n.code,{children:"+"})," by itself to concatenate strings ",(0,r.jsx)(n.code,{children:"VAR=x+y"})," \u274c. Instead you would use interpolation ",(0,r.jsx)(n.code,{children:'VAR="$x$y"'})," \u2705."]}),"\n",(0,r.jsxs)(n.h3,{id:"string-composition-",children:["String Composition ",(0,r.jsx)(n.code,{children:"'...'\"...\""})]}),"\n",(0,r.jsx)(n.p,{children:"String types can easily be combined in one definition. This is often used if you need the properties of multiple strings at once."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"VAR=hello\nCOMBINED=~/\"$VAR\"/world/'path with spaces'/\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"string-slices-stringstartend",children:["String Slices ",(0,r.jsx)(n.code,{children:"${STRING:start:end}"})]}),"\n",(0,r.jsxs)(n.p,{children:["Strings can be sliced using the syntax ",(0,r.jsx)(n.code,{children:"${STRING:start:end}"})," or ",(0,r.jsx)(n.code,{children:"${STRING:start}"})," or ",(0,r.jsx)(n.code,{children:"${STRING::end}"}),". String slices support negative indexing."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'STRING=\'hello world\'\necho "${STRING::5}" # hello\necho "${STRING:1:5}" # ello\necho "${STRING:6}" # world\necho "${STRING:6:-1}" # worl\n'})}),"\n",(0,r.jsx)(n.h3,{id:"string-length",children:"String Length"}),"\n",(0,r.jsxs)(n.p,{children:["Get the length of a string using the ",(0,r.jsx)(n.code,{children:"#"})," symbol."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"STRING='hello world'\necho \"${#STRING}\" # 11\n"})}),"\n",(0,r.jsx)(n.h2,{id:"arrays",children:"Arrays"}),"\n",(0,r.jsxs)(n.h3,{id:"declaring-arrays-array",children:["Declaring Arrays ",(0,r.jsx)(n.code,{children:"ARRAY=(...)"})]}),"\n",(0,r.jsx)(n.p,{children:"Arrays in bash are defined by using parenthesis and elements are delimited by whitespace. Arrays in bash cannot be multi-dimensional."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"ARRAY=(1 hello 3 world)\n\n# or multiline\nARRAY=(\n  1\n  hello\n  3\n  world\n)\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"indexing-arrays-arrayi",children:["Indexing Arrays ",(0,r.jsx)(n.code,{children:"${ARRAY[i]}"})]}),"\n",(0,r.jsx)(n.p,{children:"Arrays are zero indexed and can be accessed like this and support negative indexing."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'echo "${ARRAY[0]}" # 1\necho "${ARRAY[1]}" # hello\necho "${ARRAY[-1]}" # world\n'})}),"\n",(0,r.jsx)(n.p,{children:"Set an element in an array like this."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'ARRAY[0]=2\necho "${ARRAY[0]}" # 2\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"array-expansion-to-separate-strings-array",children:["Array Expansion to Separate Strings ",(0,r.jsx)(n.code,{children:"${ARRAY[@]}"})]}),"\n",(0,r.jsxs)(n.p,{children:["To get the whole array, use the ",(0,r.jsx)(n.code,{children:"@"})," symbol. Referencing the array by itself will only return the first element."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"echo \"${ARRAY[@]}\" # '1' 'hello' '3' 'world'\necho \"$ARRAY\" # 1\n"})}),"\n",(0,r.jsx)(n.p,{children:"If you do not quote the array, the individual elements will be expanded (not recommended)."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"ARRAY=(1 'hello world' 3 world)\necho \"${ARRAY[@]}\" # '1' 'hello world' '3' 'world'\necho  ${ARRAY[@]}  # '1' 'hello' 'world' '3' 'world'\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"array-expansion-to-a-single-string-array",children:["Array Expansion to a Single String ",(0,r.jsx)(n.code,{children:"${ARRAY[*]}"})]}),"\n",(0,r.jsxs)(n.p,{children:["To convert the array to a string, use the ",(0,r.jsx)(n.code,{children:"*"})," symbol."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"echo \"${ARRAY[*]}\" # '1 hello 3 world'\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"array-keys-array",children:["Array Keys ",(0,r.jsx)(n.code,{children:"${!ARRAY[@]}"})]}),"\n",(0,r.jsxs)(n.p,{children:["Get the keys of an array using the ",(0,r.jsx)(n.code,{children:"!"})," symbol."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'echo "${!ARRAY[@]}" # 0 1 2 3\n'})}),"\n",(0,r.jsx)(n.h3,{id:"array-length",children:"Array Length"}),"\n",(0,r.jsxs)(n.p,{children:["Get the length of an array using the ",(0,r.jsx)(n.code,{children:"#"})," symbol."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'echo "${#ARRAY[@]}" # 4\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"array-concatenation-array2array-array",children:["Array Concatenation ",(0,r.jsx)(n.code,{children:'ARRAY2=("${ARRAY[@]}" "${ARRAY[@]}")'})]}),"\n",(0,r.jsx)(n.p,{children:"Concatenate arrays by spreading them them."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"ARRAY=(1 hello 3 world)\nARRAY2=(\"${ARRAY[@]}\" x y \"${ARRAY[@]}\")\necho \"${ARRAY[@]}\" # '1' 'hello' '3' 'world' 'x' 'y' '1' 'hello' '3' 'world'\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"array-slices-arraystartlength",children:["Array Slices ",(0,r.jsx)(n.code,{children:"${ARRAY[@]:start:length}"})]}),"\n",(0,r.jsxs)(n.p,{children:["Slice arrays by using the syntax ",(0,r.jsx)(n.code,{children:"${ARRAY[@]:start:length}"})," or ",(0,r.jsx)(n.code,{children:"${ARRAY[@]:start}"}),". Array slices do not support negative indexing."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"ARRAY=(0 1 2 3 4 5 6 7 8 9)\necho \"${ARRAY[@]:1:3}\" # '1' '2' '3'\necho \"${ARRAY[@]:5}\" # '5' '6' '7' '8' '9'\n\n# Or as a string\necho \"${ARRAY[*]:1:3}\" # '1 2 3'\necho \"${ARRAY[*]:5}\" # '5 6 7 8 9'\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"array-iteration-for--in-array",children:["Array Iteration ",(0,r.jsx)(n.code,{children:"for ... in ${ARRAY[@]}"})]}),"\n",(0,r.jsxs)(n.p,{children:["Iterate over an array using the ",(0,r.jsx)(n.code,{children:"@"})," symbol."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'for x in "${ARRAY[@]}"; do\n  echo "$x"\ndone\n'})}),"\n",(0,r.jsx)(n.h3,{id:"splitting-strings-into-arrays",children:"Splitting Strings into Arrays"}),"\n",(0,r.jsxs)(n.p,{children:["Split a string into an array using ",(0,r.jsx)(n.code,{children:"read"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"STRING='1 2 3'\nread -ra ARRAY <<<\"$STRING\"\necho \"${ARRAY[@]}\" # '1' '2' '3'\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Split lines into an array using ",(0,r.jsx)(n.code,{children:"mapfile"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"FILE='1\n2\n3'\nmapfile -t ARRAY <<<\"$FILE\"\necho \"${ARRAY[@]}\" # '1' '2' '3'\n"})}),"\n",(0,r.jsx)(n.h3,{id:"practical-uses-of-arrays",children:"Practical Uses of Arrays"}),"\n",(0,r.jsx)(n.p,{children:"Bash arrays can either be used to hold a command's arguments or a command plus its arguments. Here are some examples:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'ARGS=(1 2 3)\n\necho "${ARGS[@]}" # 1 2 3\n'})}),"\n",(0,r.jsx)(n.p,{children:"or"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'CMD=(echo 1 2 3)\n\n"${CMD[@]}" # 1 2 3\n'})}),"\n",(0,r.jsxs)(n.p,{children:["You could also do this with an ",(0,r.jsx)(n.code,{children:"alias"})," but I typically prefer arrays when scripting and aliases for my rc files."]}),"\n",(0,r.jsxs)(n.p,{children:["If you have a command that takes many options, using an array can be a much tidier way to write it since the only way to break up a long command is to use the ",(0,r.jsx)(n.code,{children:"\\"})," to escape newlines."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'COMMAND_ARGS=(\n    -x thing1\n    -x thing2\n    -x thing3\n    -y other-thing\n    --option1\n    --option2\n)\n\ncommand "${COMMAND_ARGS[@]}"\n'})}),"\n",(0,r.jsx)(n.h2,{id:"dictionaries",children:"Dictionaries"}),"\n",(0,r.jsx)(n.p,{children:"Dictionaries are similar to arrays except they use keys instead of indexes so nearly all the same features apply. However, dictionaries do not support an easy way to concatenated/union them together like arrays, and reading them from a string is not as straight forward."}),"\n",(0,r.jsx)(n.p,{children:"Dictionaries are seldom needed and you may need a more powerful language if you find yourself needing them."}),"\n",(0,r.jsx)(n.h3,{id:"declaring-dictionaries",children:"Declaring Dictionaries"}),"\n",(0,r.jsx)(n.p,{children:"You can declare a dictionary two ways."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"declare -A DICT1\nDICT1[key1]=value1\nDICT1[key2]=value2\n\n# or\ndeclare -A DICT2=([key1]=value1 [key2]=value2)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Or multiline:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"declare -A DICT2=(\n  [key1]=value1\n  [key2]=value2\n)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"dictionary-expansions",children:"Dictionary Expansions"}),"\n",(0,r.jsxs)(n.p,{children:["Get the keys of a dictionary using the ",(0,r.jsx)(n.code,{children:"!"})," symbol (same as arrays). Use ",(0,r.jsx)(n.code,{children:"@"})," to get them an an array ",(0,r.jsx)(n.code,{children:"*"})," to get them as a string."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"declare -A DICT2=([key1]=value1 [key2]=value2)\necho \"${!DICT2[@]}\" # 'key1' 'key2'\necho \"${!DICT2[*]}\" # 'key1 key2'\n"})}),"\n",(0,r.jsx)(n.p,{children:"Values:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"declare -A DICT2=([key1]=value1 [key2]=value2)\necho \"${DICT2[@]}\" # 'key1 key2'\necho \"${DICT2[*]}\" # 'key1 key2'\n"})}),"\n",(0,r.jsx)(n.h2,{id:"globbing",children:"Globbing"}),"\n",(0,r.jsx)(n.p,{children:"Globbing is a basic pattern matching feature that lets you match files or strings. A glob expression will expand to a list of files that match the pattern. If no files match the pattern, the glob expression will remain unexpanded."}),"\n",(0,r.jsxs)(n.h3,{id:"wildcards-",children:["Wildcards ",(0,r.jsx)(n.code,{children:"*"})]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"*"})," character matches zero or more characters."]}),"\n",(0,r.jsx)(n.p,{children:"This will print all files in the current directory."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"echo *\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This will print all the ",(0,r.jsx)(n.code,{children:".txt"})," files in the current directory."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"echo *.txt\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Print all files with ",(0,r.jsx)(n.code,{children:"config"})," in the name."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"echo *config*\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"directory-wildcards-pattern",children:["Directory Wildcards ",(0,r.jsx)(n.code,{children:"**/pattern"})]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"shopt -s globstar"})," option must be enabled to use this feature."]}),"\n",(0,r.jsxs)(n.p,{children:["When a glob pattern is prefixed with ",(0,r.jsx)(n.code,{children:"**/"}),", it will recursively search the current directory and all subdirectories for files that match the pattern."]}),"\n",(0,r.jsxs)(n.h3,{id:"single-character-",children:["Single Character ",(0,r.jsx)(n.code,{children:"?"})]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"?"})," character matches exactly one character."]}),"\n",(0,r.jsxs)(n.p,{children:["In a JavaScript project that has a mix of JS and TS files, you could use ",(0,r.jsx)(n.code,{children:"?"})," in the following way to match ",(0,r.jsx)(n.code,{children:"script.js"})," and ",(0,r.jsx)(n.code,{children:"script.ts"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"echo script.?s\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"single-character-ranges-",children:["Single Character Ranges ",(0,r.jsx)(n.code,{children:"[...]"})]}),"\n",(0,r.jsx)(n.p,{children:"Similar to regular expressions, match a single character in a range."}),"\n",(0,r.jsxs)(n.p,{children:["Match all files that start with ",(0,r.jsx)(n.code,{children:"a"}),", or ",(0,r.jsx)(n.code,{children:"c"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"echo [ac]*\n"})}),"\n",(0,r.jsxs)(n.p,{children:["If you have contiguous characters, you can use a ",(0,r.jsx)(n.code,{children:"-"})," such as ",(0,r.jsx)(n.code,{children:"[a-z]"}),", ",(0,r.jsx)(n.code,{children:"[A-Z]"}),", ",(0,r.jsx)(n.code,{children:"[0-9]"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Match any file that starts with a lowercase letter ",(0,r.jsx)(n.code,{children:"a"})," to ",(0,r.jsx)(n.code,{children:"z"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"echo [a-z]*\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Exclude a range by using ",(0,r.jsx)(n.code,{children:"^"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Match any file that does not start with a lowercase letter ",(0,r.jsx)(n.code,{children:"a"})," to ",(0,r.jsx)(n.code,{children:"z"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"echo [^a-z]*\n"})}),"\n",(0,r.jsx)(n.p,{children:"Lastly, the brackets come with a prebuilt set of ranges"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-txt",children:"alnum   alpha   ascii   blank   cntrl   digit   graph   lower\nprint   punct   space   upper   word    xdigit\n"})}),"\n",(0,r.jsx)(n.p,{children:"For example, to match all files that start with a digit or a letter."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"echo [[:digit:][:alpha:]]*\n"})}),"\n",(0,r.jsx)(n.h3,{id:"extended-globbing",children:"Extended Globbing"}),"\n",(0,r.jsxs)(n.p,{children:["Bash has an extended globbing feature that should be on by default in newer version fo bash can be turned on with ",(0,r.jsx)(n.code,{children:"shopt -s extglob"}),". Extended globs allow you to specify lists of patterns separated by ",(0,r.jsx)(n.code,{children:"|"}),"."]}),"\n",(0,r.jsxs)(n.h4,{id:"match-zero-or-one-pattern-list-pattern-list",children:["Match Zero or One Pattern List ",(0,r.jsx)(n.code,{children:"?(pattern-list)"})]}),"\n",(0,r.jsxs)(n.p,{children:["If you wanted to match all ",(0,r.jsx)(n.code,{children:".txt"})," files, ",(0,r.jsx)(n.code,{children:".bash"})," files, or no extension files, you could use the following pattern."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"echo *?(.txt|.bash)\n"})}),"\n",(0,r.jsxs)(n.h4,{id:"match-zero-or-more-pattern-list-pattern-list",children:["Match Zero or More Pattern List ",(0,r.jsx)(n.code,{children:"*(pattern-list)"})]}),"\n",(0,r.jsx)(n.p,{children:"TODO"}),"\n",(0,r.jsxs)(n.h4,{id:"match-one-or-more-pattern-list-pattern-list",children:["Match One or More Pattern List ",(0,r.jsx)(n.code,{children:"+(pattern-list)"})]}),"\n",(0,r.jsx)(n.p,{children:"TODO"}),"\n",(0,r.jsxs)(n.h4,{id:"match-one-of-the-pattern-list-pattern-list",children:["Match One of the Pattern List ",(0,r.jsx)(n.code,{children:"@(pattern-list)"})]}),"\n",(0,r.jsx)(n.p,{children:"TODO"}),"\n",(0,r.jsxs)(n.h4,{id:"match-anything-except-one-of-the-pattern-list-pattern-list",children:["Match Anything Except One of the Pattern List ",(0,r.jsx)(n.code,{children:"!(pattern-list)"})]}),"\n",(0,r.jsx)(n.p,{children:"TODO"}),"\n",(0,r.jsxs)(n.h3,{id:"globbing-options-shopt--s-option",children:["Globbing Options ",(0,r.jsx)(n.code,{children:"shopt -s option"})]}),"\n",(0,r.jsxs)(n.p,{children:["Bash has several globbing options that can be set by placing ",(0,r.jsx)(n.code,{children:"shopt -s option"})," at the top of your script. Options can be unset with ",(0,r.jsx)(n.code,{children:"shopt -u option"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["By default if a glob is not match, it will not expand. If you did the following glob in a directory that had not txt files, it would not expand. ",(0,r.jsx)(n.code,{children:"*.txt"})," would stay as ",(0,r.jsx)(n.code,{children:"*.txt"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"echo *.txt # *.txt\n"})}),"\n",(0,r.jsx)(n.p,{children:"This is often not ideal if you want to error check that a glob was able to match files."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"shopt -s nullglob"}),": If a glob does not match, it will return the empty string."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"shopt -s failglob"}),": If a glob does not match, it will throw an error exiting the script if unhandled."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"shopt -s dotglob"}),": By default, ",(0,r.jsx)(n.code,{children:"echo *"})," will not include files that start with a ",(0,r.jsx)(n.code,{children:"."}),". This option will include them."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"shopt -s globskipdots"}),":"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"shopt -s extglob"}),": Extended globbing syntax to match lists of glob patterns. Should be on by default in newer versions of bash."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"shopt -s nocaseglob"}),": Makes globs case insensitive."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"shopt -s globstar"}),": When set ",(0,r.jsx)(n.code,{children:"**"})," will match zero or more directories recursively."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"shopt -s nocasematch"}),": Makes case insensitive matching for ",(0,r.jsx)(n.code,{children:"[["})," globs or ",(0,r.jsx)(n.code,{children:"case"})," statements."]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"special-parameters------",children:["Special Parameters ",(0,r.jsx)(n.code,{children:"$@"}),", ",(0,r.jsx)(n.code,{children:"$*"}),", ",(0,r.jsx)(n.code,{children:"$#"}),", ",(0,r.jsx)(n.code,{children:"$?"}),", ",(0,r.jsx)(n.code,{children:"$$"}),", ",(0,r.jsx)(n.code,{children:"$!"})]}),"\n",(0,r.jsx)(n.p,{children:"Special parameters are readonly variables that are set by the shell. They are used to read positional arguments to the script and to introspect processes."}),"\n",(0,r.jsx)(n.h3,{id:"command-line-arguments",children:"Command Line Arguments"}),"\n",(0,r.jsxs)(n.h4,{id:"command-line-arguments-as-an-array-",children:["Command Line Arguments as an Array ",(0,r.jsx)(n.code,{children:"$@"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"$@"})," gets all the arguments passed to the script as separate strings."]}),"\n",(0,r.jsx)(n.p,{children:"From the cli"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"bash script.bash 1 2 3\n"})}),"\n",(0,r.jsx)(n.p,{children:"In the script"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'echo "$@" # 1 2 3\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"@"})," is an array, so you can use any syntax listed in the array section to access the elements."]}),"\n",(0,r.jsx)(n.p,{children:"From the cli"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"bash script.bash 1 2 3 4 5\n"})}),"\n",(0,r.jsx)(n.p,{children:"In the script using an array slice"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'echo "${@:2:3}" # 2 3 4\n'})}),"\n",(0,r.jsxs)(n.p,{children:["If you use a for loop with no ",(0,r.jsx)(n.code,{children:"in"})," clause, it will iterate over the cli arguments by default."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'for ARG; do\n  echo "$ARG"\ndone\n'})}),"\n",(0,r.jsxs)(n.h4,{id:"command-line-arguments-as-a-string-",children:["Command Line Arguments as a String ",(0,r.jsx)(n.code,{children:"$*"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"$*"})," gets all the arguments passed to the script as a single string."]}),"\n",(0,r.jsx)(n.p,{children:"From the cli"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"bash script.bash 1 2 3\n"})}),"\n",(0,r.jsx)(n.p,{children:"In the script"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'echo "$*" # 1 2 3\n'})}),"\n",(0,r.jsxs)(n.h4,{id:"get-the-number-of-command-line-arguments-",children:["Get the Number of Command Line Arguments ",(0,r.jsx)(n.code,{children:"$#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"$#"})," gets the number of arguments passed to the script."]}),"\n",(0,r.jsx)(n.p,{children:"From the cli"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"bash script.bash 1 2 3\n"})}),"\n",(0,r.jsx)(n.p,{children:"In the script"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"echo $# # 3\n"})}),"\n",(0,r.jsxs)(n.h4,{id:"access-individual-command-line-arguments-n",children:["Access Individual Command Line Arguments ",(0,r.jsx)(n.code,{children:"$n"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"$n"})," gets the nth argument passed to the script."]}),"\n",(0,r.jsx)(n.p,{children:"From the cli"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"bash script.bash 1 2 3 4 5\n"})}),"\n",(0,r.jsx)(n.p,{children:"In the script using an array slice"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'echo "$1 $4 $5"\n'})}),"\n",(0,r.jsxs)(n.h4,{id:"get-the-name-of-the-script-0",children:["Get the Name of the Script ",(0,r.jsx)(n.code,{children:"$0"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"$0"})," gets the name of the script."]}),"\n",(0,r.jsx)(n.p,{children:"From the cli"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"bash script.bash 1 2 3\n"})}),"\n",(0,r.jsx)(n.p,{children:"In the script"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'echo "$0" # script.bash\n'})}),"\n",(0,r.jsx)(n.h3,{id:"process-introspection",children:"Process Introspection"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"$?"})," gets the exit status of the last command."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"(exit 42)\necho $? # 42\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This can be useful if you are checking for a specific error status, however most of the time you should use ",(0,r.jsx)(n.code,{children:"if"})," statements to check if a command failed or not."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"$$"})," gets the process id of the current script."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"$!"})," gets the process id of the last command run in the background."]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"subshells-",children:["Subshells ",(0,r.jsx)(n.code,{children:"()"})]}),"\n",(0,r.jsxs)(n.h3,{id:"command-groups-",children:["Command Groups ",(0,r.jsx)(n.code,{children:"{}"})]}),"\n",(0,r.jsxs)(n.h3,{id:"command-substitution-",children:["Command Substitution ",(0,r.jsx)(n.code,{children:"$(...)"})]}),"\n",(0,r.jsxs)(n.h3,{id:"process-substitution-",children:["Process Substitution ",(0,r.jsx)(n.code,{children:"<(...)"})]}),"\n",(0,r.jsx)(n.h2,{id:"control-flow",children:"Control Flow"}),"\n",(0,r.jsxs)(n.p,{children:["Control flow in bash works very differently to other languages. Instead of branching on ",(0,r.jsx)(n.code,{children:"true"})," or ",(0,r.jsx)(n.code,{children:"false"}),", bash will branch on the exit status of a command. A successful command with an exit status of ",(0,r.jsx)(n.code,{children:"0"})," is ",(0,r.jsx)(n.code,{children:"true"}),", and a failed command with a non-zero exit status of ",(0,r.jsx)(n.code,{children:"1..255"})," is ",(0,r.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"if-statements",children:"If Statements"}),"\n",(0,r.jsx)(n.h3,{id:"for-loops",children:"For Loops"}),"\n",(0,r.jsx)(n.h3,{id:"while-loops",children:"While Loops"}),"\n",(0,r.jsx)(n.h3,{id:"case-statements",children:"Case Statements"}),"\n",(0,r.jsx)(n.h2,{id:"conditionals",children:"Conditionals"}),"\n",(0,r.jsx)(n.h3,{id:"",children:(0,r.jsx)(n.code,{children:"(())"})}),"\n",(0,r.jsx)(n.h3,{id:"-1",children:(0,r.jsx)(n.code,{children:"[[]]"})}),"\n",(0,r.jsx)(n.h3,{id:"-2",children:(0,r.jsx)(n.code,{children:"[]"})}),"\n",(0,r.jsx)(n.h3,{id:"test",children:(0,r.jsx)(n.code,{children:"test"})}),"\n",(0,r.jsx)(n.h3,{id:"booleans",children:'"Booleans"'}),"\n",(0,r.jsxs)(n.h3,{id:"regex-",children:["Regex ",(0,r.jsx)(n.code,{children:"=~"})]}),"\n",(0,r.jsx)(n.h2,{id:"functions",children:"Functions"}),"\n",(0,r.jsxs)(n.h3,{id:"defining-functions-fn---",children:["Defining Functions ",(0,r.jsx)(n.code,{children:"fn() { ... }"})]}),"\n",(0,r.jsxs)(n.h3,{id:"calling-functions-fn",children:["Calling Functions ",(0,r.jsx)(n.code,{children:"fn"})]}),"\n",(0,r.jsxs)(n.h3,{id:"calling-functions-with-arguments-fn-1-2-3",children:["Calling Functions with Arguments ",(0,r.jsx)(n.code,{children:"fn 1 2 3"})]}),"\n",(0,r.jsxs)(n.h3,{id:"using-functions-arguments-",children:["Using Functions Arguments ",(0,r.jsx)(n.code,{children:'"$@"'})]}),"\n",(0,r.jsxs)(n.h3,{id:"returning-exit-codes-return",children:["Returning Exit Codes ",(0,r.jsx)(n.code,{children:"return"})]}),"\n",(0,r.jsxs)(n.h3,{id:"returning-values-echo--n-",children:['"Returning" Values ',(0,r.jsx)(n.code,{children:"echo -n ..."})]}),"\n",(0,r.jsx)(n.h3,{id:"brackets-vs-parentheses",children:"Brackets vs. Parentheses"}),"\n",(0,r.jsx)(n.h2,{id:"pipes",children:"Pipes"}),"\n",(0,r.jsxs)(n.h3,{id:"pipe-stdout-to-stdin-",children:["Pipe STDOUT to STDIN ",(0,r.jsx)(n.code,{children:"|"})]}),"\n",(0,r.jsxs)(n.h3,{id:"pipe-stdout-and-stderr-to-stdin-",children:["Pipe STDOUT and STDERR to STDIN ",(0,r.jsx)(n.code,{children:"|&"})]}),"\n",(0,r.jsx)(n.h2,{id:"redirects",children:"Redirects"}),"\n",(0,r.jsxs)(n.h3,{id:"read-a-file-to-stdin-",children:["Read a File to STDIN ",(0,r.jsx)(n.code,{children:"<"})]}),"\n",(0,r.jsxs)(n.h3,{id:"read-a-string-to-stdin-",children:["Read a String to STDIN ",(0,r.jsx)(n.code,{children:"<<<"})]}),"\n",(0,r.jsxs)(n.h3,{id:"write-to-a-file-from-stdout-",children:["Write to a File from STDOUT ",(0,r.jsx)(n.code,{children:">"})]}),"\n",(0,r.jsxs)(n.h3,{id:"append-to-a-file-from-stdout-",children:["Append to a File from STDOUT ",(0,r.jsx)(n.code,{children:">>"})]}),"\n",(0,r.jsx)(n.h3,{id:"file-descriptors",children:"File Descriptors"}),"\n",(0,r.jsxs)(n.h3,{id:"open-a-file-exec-fdfiletxt",children:["Open a File ",(0,r.jsx)(n.code,{children:"exec fd<>file.txt"})]}),"\n",(0,r.jsxs)(n.h3,{id:"close-a-file-exec-fd-",children:["Close a File ",(0,r.jsx)(n.code,{children:"exec fd>&-"})]}),"\n",(0,r.jsxs)(n.h2,{id:"arithmetic-expansions-xy",children:["Arithmetic Expansions ",(0,r.jsx)(n.code,{children:"((x+=y))"})]}),"\n",(0,r.jsx)(n.h2,{id:"expansions",children:"Expansions"}),"\n",(0,r.jsxs)(n.h3,{id:"ranges-startstopstep",children:["Ranges ",(0,r.jsx)(n.code,{children:"{start..stop..step}"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"echo {1..5} # 1 2 3 4 5\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'for i in {1..5}; do\n  echo "$i"\ndone\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"echo {0..10..2} # 0 2 4 6 8 10\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"brace-expansions-prefixmiddle1middle2suffix",children:["Brace Expansions ",(0,r.jsx)(n.code,{children:"prefix{middle1,middle2,}suffix"})]}),"\n",(0,r.jsxs)(n.h3,{id:"parameter-expansions-var2var",children:["Parameter Expansions ",(0,r.jsx)(n.code,{children:"VAR2=${VAR...}"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"${parameter:-word}"})," default value"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"${parameter:=word}"})," default value and set"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"${parameter:?word}"})," error message"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"${parameter:+word}"})," alternate value"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"${!prefix*}"})," all variables with prefix as a single string"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"${!prefix@}"})," all variables with prefix as separate strings"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"${parameter#word}"})," remove prefix"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"${parameter##word}"})," remove prefix greedy"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"${parameter%word}"})," remove suffix"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"${parameter%%word}"})," remove suffix greedy"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"${parameter/pattern/string}"})," replace first"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"${parameter//pattern/string}"})," replace all"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"${parameter/#pattern/string}"})," replace prefix"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"${parameter/%pattern/string}"})," replace suffix"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"${parameter^pattern}"})," capitalize first"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"${parameter^^pattern}"})," capitalize all"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"${parameter,pattern}"})," lower first"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"${parameter,,pattern}"})," lower all"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"${parameter@operator}"})," apply operator","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"U"})," uppercase"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"u"})," capitalize"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"L"})," lowercase"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Q"})," escape and quote"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"E"})," escape?"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"P"})," interpret string as a variable"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"A"})," Generate a declare statement that, when evaluated, will recreate the array"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"K"})," Get all dict keys and values as a string. Values will be double quoted ",(0,r.jsx)(n.code,{children:'\'key1 "value1" key2 "value2"\''})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"a"})," Get all the flags for the variable's declaration"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"k"})," Get all dict keys and values as separate strings ",(0,r.jsx)(n.code,{children:"${!parameter[@]}"})," ",(0,r.jsx)(n.code,{children:"'key1' 'value1' 'key2' 'value2'"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"tilde-expansion-",children:["Tilde Expansion ",(0,r.jsx)(n.code,{children:"~"})]}),"\n",(0,r.jsx)(n.h2,{id:"strict-mode",children:"Strict Mode"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"set -euo pipefail\n"})}),"\n",(0,r.jsx)(n.h2,{id:"running-scripts",children:"Running Scripts"}),"\n",(0,r.jsx)(n.h3,{id:"running-scripts-as-files",children:"Running Scripts as Files"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"bash script.bash\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"chmod u+x script.bash\n./script.bash\n"})}),"\n",(0,r.jsx)(n.h3,{id:"running-scripts-as-strings",children:"Running Scripts as Strings"}),"\n",(0,r.jsx)(n.h4,{id:"running-script-strings-through-stdin",children:"Running Script Strings through STDIN"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"bash <script.bash\necho 'echo hello world!' | bash # hello world\nbash <<<'echo hello world!' # hello world\ncat script.bash | bash\ncurl -fsSL https://example.com/script.bash | bash\n"})}),"\n",(0,r.jsxs)(n.h4,{id:"running-script-strings-with-bash--c",children:["Running Script Strings with ",(0,r.jsx)(n.code,{children:"bash -c"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'bash -c "echo Hello world!"\nbash -c "$(curl -fsSL https://example.com/script.bash)"\n'})}),"\n",(0,r.jsxs)(n.h4,{id:"running-script-strings-with-process-substitution-bash-",children:["Running Script Strings with Process Substitution ",(0,r.jsx)(n.code,{children:"bash <(...)"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"bash <(cat script.bash)\nbash <(curl -fsSL https://example.com/script.bash)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"adding-color-to-your-bash-scripts",children:"Adding Color to Your Bash Scripts"}),"\n",(0,r.jsxs)(n.h2,{id:"debugging-with-bash--x",children:["Debugging with ",(0,r.jsx)(n.code,{children:"bash -x"})]}),"\n",(0,r.jsx)(n.h2,{id:"helpful-tools",children:"Helpful Tools"}),"\n",(0,r.jsxs)(n.h3,{id:"shfmt-a-shell-script-formatter",children:[(0,r.jsx)(n.code,{children:"shfmt"})," a shell script formatter"]}),"\n",(0,r.jsxs)(n.h3,{id:"shellcheck-a-shell-script-linter",children:[(0,r.jsx)(n.code,{children:"shellcheck"})," a shell script linter"]})]})}function o(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},5658:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>a});var i=s(758);const r={},l=i.createContext(r);function c(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);