"use strict";(self.webpackChunkbash_script_reference=self.webpackChunkbash_script_reference||[]).push([[981],{567:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>r,contentTitle:()=>l,default:()=>a,frontMatter:()=>i,metadata:()=>n,toc:()=>u});const n=JSON.parse('{"id":"subshells","title":"Subshells","description":"Subshells ()","source":"@site/docs/012-subshells.md","sourceDirName":".","slug":"/subshells","permalink":"/bash-script-reference/docs/subshells","draft":false,"unlisted":false,"editUrl":"https://github.com/seeker-3/bash-script-reference/tree/main/docs/012-subshells.md","tags":[],"version":"current","sidebarPosition":12,"frontMatter":{},"sidebar":"referenceSidebar","previous":{"title":"Redirects","permalink":"/bash-script-reference/docs/redirects"},"next":{"title":"Globbing","permalink":"/bash-script-reference/docs/globbing"}}');var o=t(6070),c=t(5658);const i={},l="Subshells",r={},u=[{value:"Subshells <code>()</code>",id:"subshells-",level:2},{value:"Command Substitution <code>$(...)</code>",id:"command-substitution-",level:2},{value:"Process Substitution",id:"process-substitution",level:2},{value:"Input Process Substitution <code>&lt;(...)</code>",id:"input-process-substitution-",level:3},{value:"Output Process Substitution <code>&gt;(...)</code>",id:"output-process-substitution-",level:3},{value:"Command Groups <code>{}</code>",id:"command-groups-",level:2}];function d(e){const s={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(s.header,{children:(0,o.jsx)(s.h1,{id:"subshells",children:"Subshells"})}),"\n",(0,o.jsxs)(s.h2,{id:"subshells-",children:["Subshells ",(0,o.jsx)(s.code,{children:"()"})]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-bash",children:"(\n  command1\n  command2\n  command3\n)\n"})}),"\n",(0,o.jsxs)(s.h2,{id:"command-substitution-",children:["Command Substitution ",(0,o.jsx)(s.code,{children:"$(...)"})]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-bash",children:"CAPTURED=$(command)\n"})}),"\n",(0,o.jsx)(s.h2,{id:"process-substitution",children:"Process Substitution"}),"\n",(0,o.jsxs)(s.p,{children:["Process substitutions essentially let you use subshells as anonymous files. Where a command would typically take a file argument ",(0,o.jsx)(s.code,{children:"command file.txt"}),", process substitution lets you use subcommands as the file ",(0,o.jsx)(s.code,{children:"command <(subcommand)"}),"."]}),"\n",(0,o.jsxs)(s.h3,{id:"input-process-substitution-",children:["Input Process Substitution ",(0,o.jsx)(s.code,{children:"<(...)"})]}),"\n",(0,o.jsxs)(s.p,{children:["Input process substitution lets you use the output of a subshell as an input file to a command. This is commonly used with ",(0,o.jsx)(s.code,{children:"diff"})," to compare the output of two commands."]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-bash",children:"diff <(command1) <(command2)\n"})}),"\n",(0,o.jsx)(s.p,{children:"Here is a full example comparing the output of a problem to a solution and sorting the output before comparing."}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-bash",children:"diff <(\n  ./solution | sort\n) <(\n  g++ -o problem problem.cpp && ./problem | sort\n)\n"})}),"\n",(0,o.jsxs)(s.h3,{id:"output-process-substitution-",children:["Output Process Substitution ",(0,o.jsx)(s.code,{children:">(...)"})]}),"\n",(0,o.jsxs)(s.p,{children:["Output process substitution lets you use the output file of a command as the input to a subshell. This is less commonly used, but this can be used with ",(0,o.jsx)(s.code,{children:"tee"})," to fork the output of a command to multiple commands. ",(0,o.jsx)(s.code,{children:"tee"})," normally accepts a list of files, writing the output to each file, and printing the output to stdout: ",(0,o.jsx)(s.code,{children:"tee fil1 file1 file2"}),"."]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-bash",children:"command | tee >(command1) >(command2) >(command3) > >(command4)\n"})}),"\n",(0,o.jsxs)(s.h2,{id:"command-groups-",children:["Command Groups ",(0,o.jsx)(s.code,{children:"{}"})]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-bash",children:"{\n  command1\n  command2\n  command3\n}\n"})})]})}function a(e={}){const{wrapper:s}={...(0,c.R)(),...e.components};return s?(0,o.jsx)(s,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},5658:(e,s,t)=>{t.d(s,{R:()=>i,x:()=>l});var n=t(758);const o={},c=n.createContext(o);function i(e){const s=n.useContext(c);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),n.createElement(c.Provider,{value:s},e.children)}}}]);