"use strict";(self.webpackChunkbash_script_reference=self.webpackChunkbash_script_reference||[]).push([[741],{4757:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>t,contentTitle:()=>l,default:()=>a,frontMatter:()=>d,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"arithmetic","title":"Arithmetic ((x+=y))","description":"Bash only supports integer arithmetic. Bash uses signed 64-bit integers. The (( )) construct is used to evaluate arithmetic expressions. The $ is not required to use variables inside the expression.","source":"@site/docs/016-arithmetic.md","sourceDirName":".","slug":"/arithmetic","permalink":"/bash-script-reference/docs/arithmetic","draft":false,"unlisted":false,"editUrl":"https://github.com/seeker-3/bash-script-reference/tree/main/docs/016-arithmetic.md","tags":[],"version":"current","sidebarPosition":16,"frontMatter":{},"sidebar":"referenceSidebar","previous":{"title":"Conditionals","permalink":"/bash-script-reference/docs/conditionals"},"next":{"title":"Parameter Expansions ${VAR...}","permalink":"/bash-script-reference/docs/parameter-expansions"}}');var r=i(6070),c=i(5658);const d={},l="Arithmetic ((x+=y))",t={},o=[{value:"Expressions",id:"expressions",level:2},{value:"Assignments",id:"assignments",level:2},{value:"Conditionals",id:"conditionals",level:2},{value:"C-Style For Loops",id:"c-style-for-loops",level:2},{value:"Strings in Arithmetic",id:"strings-in-arithmetic",level:2}];function h(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,c.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsxs)(n.h1,{id:"arithmetic-xy",children:["Arithmetic ",(0,r.jsx)(n.code,{children:"((x+=y))"})]})}),"\n",(0,r.jsxs)(n.p,{children:["Bash only supports integer arithmetic. Bash uses signed 64-bit integers. The ",(0,r.jsx)(n.code,{children:"(( ))"})," construct is used to evaluate arithmetic expressions. The ",(0,r.jsx)(n.code,{children:"$"})," is not required to use variables inside the expression."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"-"})," ",(0,r.jsx)(n.code,{children:"+"})," unary minus and plus"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"+"})," ",(0,r.jsx)(n.code,{children:"-"})," binary addition and subtraction"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"*"})," ",(0,r.jsx)(n.code,{children:"/"})," ",(0,r.jsx)(n.code,{children:"%"})," multiplication, division, remainder"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"**"})," exponentiation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"<<"})," ",(0,r.jsx)(n.code,{children:">>"})," left and right bitwise shifts"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"~"})," bitwise NOT"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"&"})," bitwise AND"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"|"})," bitwise OR"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"^"})," bitwise exclusive OR"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"!"})," logical NOT"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"&&"})," logical AND"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"||"})," logical OR"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"=="})," ",(0,r.jsx)(n.code,{children:"!="})," equality and inequality"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"<="})," ",(0,r.jsx)(n.code,{children:">="})," ",(0,r.jsx)(n.code,{children:"<"})," ",(0,r.jsx)(n.code,{children:">"})," comparison"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"condition ? true_expr : false_expr"})," ternary operator"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"="})," ",(0,r.jsx)(n.code,{children:"+="})," ",(0,r.jsx)(n.code,{children:"-="})," ",(0,r.jsx)(n.code,{children:"*="})," ",(0,r.jsx)(n.code,{children:"/="})," ",(0,r.jsx)(n.code,{children:"%="})," ",(0,r.jsx)(n.code,{children:"<<="})," ",(0,r.jsx)(n.code,{children:">>="})," ",(0,r.jsx)(n.code,{children:"&="})," ",(0,r.jsx)(n.code,{children:"^="})," ",(0,r.jsx)(n.code,{children:"|="})," assignment"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"id++"})," ",(0,r.jsx)(n.code,{children:"id--"})," variable post-increment and post-decrement"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"++id"})," ",(0,r.jsx)(n.code,{children:"--id"})," variable pre-increment and pre-decrement"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"expr1, expr2"})," comma"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"expressions",children:"Expressions"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'X=5\nY=$((X + 5))\necho "$Y"       # 10\necho $((Y * 2)) # 20\n'})}),"\n",(0,r.jsx)(n.h2,{id:"assignments",children:"Assignments"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'X=5\n((X += 5))\necho "$X" # 10\n'})}),"\n",(0,r.jsx)(n.h2,{id:"conditionals",children:"Conditionals"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"X=5\nif ((X == 5)); then\n  echo 'X is 5'\nfi\n"})}),"\n",(0,r.jsx)(n.h2,{id:"c-style-for-loops",children:"C-Style For Loops"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'for ((i = 0; i < 5; i++)); do\n  echo "$i"\ndone\n'})}),"\n",(0,r.jsx)(n.h2,{id:"strings-in-arithmetic",children:"Strings in Arithmetic"}),"\n",(0,r.jsx)(n.p,{children:"Recursive resolution"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"VAR1=VAR2\nVAR2=VAR3\nVAR3=VAR4\nVAR4=3\n# VAR1 -> VAR2 -> VAR3 -> VAR4 -> 3\necho $((VAR1 + 5)) # 8\n"})}),"\n",(0,r.jsx)(n.p,{children:"The empty string is treated as 0"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"EMPTY=\necho $((EMPTY + 5)) # 5\n"})})]})}function a(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},5658:(e,n,i)=>{i.d(n,{R:()=>d,x:()=>l});var s=i(758);const r={},c=s.createContext(r);function d(e){const n=s.useContext(c);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),s.createElement(c.Provider,{value:n},e.children)}}}]);