"use strict";(self.webpackChunkbash_script_reference=self.webpackChunkbash_script_reference||[]).push([[739],{4225:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"strict-mode","title":"Strict Mode","description":"Strict mode provides a better set of default behavior for bash scripts. I learned about this feature from Anthony Explains, here is the full video. It is enabled by adding the following line to the top of the script:","source":"@site/docs/020-strict-mode.md","sourceDirName":".","slug":"/strict-mode","permalink":"/bash-script-reference/docs/strict-mode","draft":false,"unlisted":false,"editUrl":"https://github.com/seeker-3/bash-script-reference/tree/main/docs/020-strict-mode.md","tags":[],"version":"current","sidebarPosition":20,"frontMatter":{},"sidebar":"referenceSidebar","previous":{"title":"Tilde Expansion ~","permalink":"/bash-script-reference/docs/tilde-expansions"},"next":{"title":"Running Scripts","permalink":"/bash-script-reference/docs/running-scripts"}}');var t=i(6070),r=i(5658);const a={},o="Strict Mode",l={},c=[{value:"Exit on Error <code>-e</code>",id:"exit-on-error--e",level:2},{value:"Handling Errors",id:"handling-errors",level:3},{value:"Unset Variables Fail <code>-u</code>",id:"unset-variables-fail--u",level:2},{value:"Pipe Fail <code>-o pipefail</code>",id:"pipe-fail--o-pipefail",level:2}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"strict-mode",children:"Strict Mode"})}),"\n",(0,t.jsxs)(n.p,{children:["Strict mode provides a better set of default behavior for bash scripts. I learned about this feature from Anthony Explains, ",(0,t.jsx)(n.a,{href:"https://youtu.be/9fSkygQ-ZjI?si=k9_CCOtDV_RY9ISv",children:"here is the full video"}),". It is enabled by adding the following line to the top of the script:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"set -euo pipefail\n"})}),"\n",(0,t.jsx)(n.p,{children:"Let's break down what each of these options does:"}),"\n",(0,t.jsxs)(n.h2,{id:"exit-on-error--e",children:["Exit on Error ",(0,t.jsx)(n.code,{children:"-e"})]}),"\n",(0,t.jsxs)(n.p,{children:["This will cause a bash script to exit if a command fails. Normally, if a command fails, a bash script will keep going. We can demonstrate this behavior by using a subshell that exits with a failure status of 1 ",(0,t.jsx)(n.code,{children:"(exit 1)"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"(exit 1) # Exits with status 1 but keeps running the script\necho 'This will still run because -e is not set'\n\nset -e # Turn on -e\n\n(exit 1) # Exits with status 1 and stops the script\necho 'This will not run'\n\n# Output:\n# This will still run because -e is not set\n"})}),"\n",(0,t.jsx)(n.h3,{id:"handling-errors",children:"Handling Errors"}),"\n",(0,t.jsxs)(n.p,{children:["You can still handle errors by using ",(0,t.jsx)(n.code,{children:"if"})," statements or the ",(0,t.jsx)(n.code,{children:"||"})," operator."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"set -e\nif ! (exit 1); then\n    echo 'Command failed'\nfi\necho 'Error handled'\n# Output:\n# Command failed\n# Error handled\n"})}),"\n",(0,t.jsxs)(n.p,{children:["To ignore errors, you can use ",(0,t.jsx)(n.code,{children:"|| true"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"set -e\n(exit 1) || true\necho 'Error ignored'\n# Output:\n# Error ignored\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Lastly, if you need to check the specific exit status of a command, you can use ",(0,t.jsx)(n.code,{children:"|| VAR=$?"})," to ignore the error and capture the status."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'(exit 42) || STATUS=$?\n\ncase $STATUS in\n0) echo "Success" ;;\n1) echo "Failure" ;;\n42) echo "The answer";;\n*) echo "Other" ;;\nesac\n\n# Output: The answer\n'})}),"\n",(0,t.jsxs)(n.h2,{id:"unset-variables-fail--u",children:["Unset Variables Fail ",(0,t.jsx)(n.code,{children:"-u"})]}),"\n",(0,t.jsx)(n.p,{children:"When this option is set, bash will exit if you try to use an unset variable. Normally, bash will just substitute an empty string for the unset variable."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"echo $UNSET_VARIABLE # Empty string\necho 'This will still run because -u is not set'\n\nset -u\n\necho $UNSET_VARIABLE\necho 'This will not run because -u is set'\n# OUTPUT:\n# This will still run because -u is not set\n# strict-mode.bash: line 6: UNSET_VARIABLE: unbound variable\n"})}),"\n",(0,t.jsxs)(n.p,{children:["You can safely reference an unset variable by using the parameter expansion ",(0,t.jsx)(n.code,{children:"${UNSET_VARIABLE:-default-value}"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"set -u\necho ${UNSET_VARIABLE:-} # Empty string\necho ${UNSET_VARIABLE:-default-value} # default-value\n"})}),"\n",(0,t.jsx)(n.p,{children:"This can be very useful if your script or function takes optional positional arguments."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"set -u\nCOMMAND=${1:-run}\n\ncase $COMMAND in\nrun) echo 'Running' ;; # Default action\ntest) echo 'Testing' ;;\nskip) echo 'Skipping' ;;\n*) echo 'Unknown command' ;;\nesac\n"})}),"\n",(0,t.jsxs)(n.p,{children:["You can also check if a variable is set using the ",(0,t.jsx)(n.code,{children:"-v"})," conditional expression by passing the name of the variable as a string."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"if [ -v VARIABLE ]; then\n    echo \"Variable is: $VARIABLE\"\nelse\n    echo 'Variable is unset'\nfi\n\nVARIABLE='i love sushi'\n\nif [ -v VARIABLE ]; then\n    echo \"Variable is: $VARIABLE\"\nelse\n    echo 'Variable is unset'\nfi\n\n# Output:\n# Variable is unset\n# Variable is i love sushi\n"})}),"\n",(0,t.jsxs)(n.h2,{id:"pipe-fail--o-pipefail",children:["Pipe Fail ",(0,t.jsx)(n.code,{children:"-o pipefail"})]}),"\n",(0,t.jsxs)(n.p,{children:["When you run a pipeline in bash, ",(0,t.jsx)(n.code,{children:"command1 | command2 | command3"}),", the whole pipeline gets an exit status. By default, the pipeline will get the exit status of the last command. This can be a problem if ",(0,t.jsx)(n.code,{children:"command1"})," or ",(0,t.jsx)(n.code,{children:"command2"})," fails but ",(0,t.jsx)(n.code,{children:"command3"})," succeeds."]}),"\n",(0,t.jsxs)(n.p,{children:["With ",(0,t.jsx)(n.code,{children:"-o pipefail"}),", if an error occurs in the command chain, the error will propagate through and the pipeline will exit with the status of the failing command."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'(exit 1) | (exit 0)\necho "First pipeline exited with $?"\n\nset -o pipefail\n\n(exit 1) | (exit 0)\necho "Second pipeline exited with $?"\n\n# Output:\n# First pipeline exited with 0\n# Second pipeline exited with 1\n'})}),"\n",(0,t.jsx)(n.p,{children:"If multiple commands fail, the pipeline will get the status of the last failing command."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'(exit 1) | (exit 2) | (exit 0)\necho "First pipeline exited with $?"\n\nset -o pipefail\n\n(exit 1) | (exit 2) | (exit 0)\necho "Second pipeline exited with $?"\n# Output:\n# First pipeline exited with 0\n# Second pipeline exited with 2\n'})})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},5658:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>o});var s=i(758);const t={},r=s.createContext(t);function a(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);