"use strict";(self.webpackChunkbash_script_reference=self.webpackChunkbash_script_reference||[]).push([[172],{3031:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>c,contentTitle:()=>t,default:()=>x,frontMatter:()=>l,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"parameter-expansions","title":"Parameter Expansions ${VAR...}","description":"- ${parameter:-word} default value","source":"@site/docs/017-parameter-expansions.md","sourceDirName":".","slug":"/parameter-expansions","permalink":"/bash-script-reference/docs/parameter-expansions","draft":false,"unlisted":false,"editUrl":"https://github.com/seeker-3/bash-script-reference/tree/main/docs/017-parameter-expansions.md","tags":[],"version":"current","sidebarPosition":17,"frontMatter":{},"sidebar":"referenceSidebar","previous":{"title":"Arithmetic ((x+=y))","permalink":"/bash-script-reference/docs/arithmetic"},"next":{"title":"Brace Expansions","permalink":"/bash-script-reference/docs/brace-expansions"}}');var a=s(6070),i=s(5658);const l={},t="Parameter Expansions ${VAR...}",c={},d=[];function o(e){const r={code:"code",h1:"h1",header:"header",li:"li",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(r.header,{children:(0,a.jsxs)(r.h1,{id:"parameter-expansions-var",children:["Parameter Expansions ",(0,a.jsx)(r.code,{children:"${VAR...}"})]})}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"${parameter:-word}"})," default value"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"${parameter:=word}"})," default value and set"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"${parameter:?word}"})," error message"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"${parameter:+word}"})," alternate value"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"${!prefix*}"})," all variables with prefix as a single string"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"${!prefix@}"})," all variables with prefix as separate strings"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"${parameter#word}"})," remove prefix"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"${parameter##word}"})," remove prefix greedy"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"${parameter%word}"})," remove suffix"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"${parameter%%word}"})," remove suffix greedy"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"${parameter/pattern/string}"})," replace first"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"${parameter//pattern/string}"})," replace all"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"${parameter/#pattern/string}"})," replace prefix"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"${parameter/%pattern/string}"})," replace suffix"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"${parameter^pattern}"})," capitalize first"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"${parameter^^pattern}"})," capitalize all"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"${parameter,pattern}"})," lower first"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"${parameter,,pattern}"})," lower all"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"${parameter@operator}"})," apply operator","\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"U"})," uppercase"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"u"})," capitalize"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"L"})," lowercase"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"Q"})," escape and quote"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"E"})," escape?"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"P"})," interpret string as a variable"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"A"})," Generate a declare statement that, when evaluated, will recreate the variable"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"K"})," Get all dict keys and values as a string. Values will be double quoted ",(0,a.jsx)(r.code,{children:'\'key1 "value1" key2 "value2"\''})]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"a"})," Get all the flags for the variable's declaration"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"k"})," Get all dict keys and values as separate strings ",(0,a.jsx)(r.code,{children:"${!parameter[@]}"})," ",(0,a.jsx)(r.code,{children:"'key1' 'value1' 'key2' 'value2'"})]}),"\n"]}),"\n"]}),"\n"]})]})}function x(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,a.jsx)(r,{...e,children:(0,a.jsx)(o,{...e})}):o(e)}},5658:(e,r,s)=>{s.d(r,{R:()=>l,x:()=>t});var n=s(758);const a={},i=n.createContext(a);function l(e){const r=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function t(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),n.createElement(i.Provider,{value:r},e.children)}}}]);