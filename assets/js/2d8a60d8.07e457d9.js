"use strict";(self.webpackChunkbash_script_reference=self.webpackChunkbash_script_reference||[]).push([[566],{6264:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>t,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>a,toc:()=>o});const a=JSON.parse('{"id":"basics","title":"Basics","description":"Comments","source":"@site/docs/003-basics.md","sourceDirName":".","slug":"/basics","permalink":"/bash-script-reference/docs/basics","draft":false,"unlisted":false,"editUrl":"https://github.com/seeker-3/bash-script-reference/tree/main/docs/003-basics.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{},"sidebar":"referenceSidebar","previous":{"title":"Your First Bash Script","permalink":"/bash-script-reference/docs/hello-world"},"next":{"title":"Strings","permalink":"/bash-script-reference/docs/strings"}}');var i=s(6070),r=s(5658);const l={},c="Basics",t={},o=[{value:"Comments",id:"comments",level:2},{value:"Printing to the Console <code>echo</code>",id:"printing-to-the-console-echo",level:2},{value:"Variables",id:"variables",level:2},{value:"Declaring Variables <code>X=</code>",id:"declaring-variables-x",level:3},{value:"Assigning a Value `X=1",id:"assigning-a-value-x1",level:3},{value:"Reassigning Variables <code>VAR=x</code>",id:"reassigning-variables-varx",level:3},{value:"Referencing Variables <code>$VAR</code>",id:"referencing-variables-var",level:3},{value:"Variable Interpolation",id:"variable-interpolation",level:3},{value:"Running Commands",id:"running-commands",level:2},{value:"Variables as Commands",id:"variables-as-commands",level:3},{value:"Passing Arguments to Commands",id:"passing-arguments-to-commands",level:3},{value:"Temporary Environment Variables <code>VAR=value command</code>",id:"temporary-environment-variables-varvalue-command",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"basics",children:"Basics"})}),"\n",(0,i.jsx)(n.h2,{id:"comments",children:"Comments"}),"\n",(0,i.jsxs)(n.p,{children:["Comments are lines that start with a ",(0,i.jsx)(n.code,{children:"#"})," character. Bash does not support multi-line comments."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# This is a comment\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"printing-to-the-console-echo",children:["Printing to the Console ",(0,i.jsx)(n.code,{children:"echo"})]}),"\n",(0,i.jsxs)(n.p,{children:["Bash has a builtin command ",(0,i.jsx)(n.code,{children:"echo"})," that will print its arguments to the console."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"echo 1 2 3 # 1 2 3\n"})}),"\n",(0,i.jsx)(n.h2,{id:"variables",children:"Variables"}),"\n",(0,i.jsx)(n.p,{children:'Variables in bash are untyped however, the only primitive data type in bash is a string. Bash has "numbers" but they are just strings that can be interpreted as numbers in certain contexts.'}),"\n",(0,i.jsxs)(n.p,{children:["Variables follow the same rules as identifiers in in ",(0,i.jsx)(n.code,{children:"C"}),". Variables must start with a letter or an underscore ",(0,i.jsx)(n.code,{children:"[_a-zA-Z]"})," and can contain letters, numbers, and underscores ",(0,i.jsx)(n.code,{children:"[_a-zA-Z0-9]"}),". Variables are case sensitive."]}),"\n",(0,i.jsxs)(n.p,{children:["Variables in bash are commonly written in upper snake case by convention ",(0,i.jsx)(n.code,{children:"MY_VARIABLE"}),"."]}),"\n",(0,i.jsxs)(n.h3,{id:"declaring-variables-x",children:["Declaring Variables ",(0,i.jsx)(n.code,{children:"X="})]}),"\n",(0,i.jsxs)(n.p,{children:["Declare variables using ",(0,i.jsx)(n.code,{children:"="})," immediately after an identifier. Variables cannot have spaces around the ",(0,i.jsx)(n.code,{children:"="})," sign."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"X=\n# X is the empty string\n"})}),"\n",(0,i.jsx)(n.h3,{id:"assigning-a-value-x1",children:"Assigning a Value `X=1"}),"\n",(0,i.jsxs)(n.p,{children:["Assign a value to a variable by placing a string after the ",(0,i.jsx)(n.code,{children:"="})," sign."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"X=1\n# X is now 1\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"reassigning-variables-varx",children:["Reassigning Variables ",(0,i.jsx)(n.code,{children:"VAR=x"})]}),"\n",(0,i.jsx)(n.p,{children:"Once a variable is declared, it can be reassigned."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"X=1\nX=2\n# X is now 2\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"referencing-variables-var",children:["Referencing Variables ",(0,i.jsx)(n.code,{children:"$VAR"})]}),"\n",(0,i.jsxs)(n.p,{children:["Reference a variable using the ",(0,i.jsx)(n.code,{children:"$"})," sign."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"X=1\nX2=$X\necho $X $X2 # 1 1\n"})}),"\n",(0,i.jsx)(n.h3,{id:"variable-interpolation",children:"Variable Interpolation"}),"\n",(0,i.jsxs)(n.p,{children:["Variables in bash can easily be interpolated by simply placing the variable name in a string. Any character that cannot be part of the identifier will be seen as the end of the variable name e.g. ",(0,i.jsx)(n.code,{children:"-"}),", ",(0,i.jsx)(n.code,{children:"/"}),", ",(0,i.jsx)(n.code,{children:"$"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"X=1\nXS=$X$X\necho $XS # 11\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'APPS_DIR=apps\nNEOVIM_PATH=$HOME/$APPS_DIR/nvim\necho "$NEOVIM_PATH" # ~/apps/nvim\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In a situation where you want to use a character that is not allowed in an identifier, you can use curly braces ",(0,i.jsx)(n.code,{children:"{}"})," to specify the end of the variable name."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"X=1\nWRAPPED_X=__${X}__\necho $WRAPPED_X # __1__\n"})}),"\n",(0,i.jsx)(n.h2,{id:"running-commands",children:"Running Commands"}),"\n",(0,i.jsx)(n.p,{children:"By default, just like the cli, anything typed on a line will be executed as a command."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"ls # lists the files in the current directory\n"})}),"\n",(0,i.jsx)(n.h3,{id:"variables-as-commands",children:"Variables as Commands"}),"\n",(0,i.jsx)(n.p,{children:"Even variables by themselves will be interpreted as commands."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"MY_LS=ls\n$MY_LS      # lists the files in the current directory\necho $MY_LS # ls\n"})}),"\n",(0,i.jsx)(n.h3,{id:"passing-arguments-to-commands",children:"Passing Arguments to Commands"}),"\n",(0,i.jsx)(n.p,{children:"Same as the cli, arguments to commands are separated by spaces."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"echo arg1 arg2 arg3 # arg1 arg2 arg3\n"})}),"\n",(0,i.jsxs)(n.p,{children:["If you want to run a command that spans multiple lines, you can use a backslash ",(0,i.jsx)(n.code,{children:"\\"})," to escape newlines between arguments."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"echo \\\n  1 \\\n  2 \\\n  3\n"})}),"\n",(0,i.jsx)(n.p,{children:"This can be useful when you want to break up a long command into multiple lines for better readability."}),"\n",(0,i.jsxs)(n.p,{children:["For example, when installing multiple packages with ",(0,i.jsx)(n.code,{children:"apt"}),", you can put each package on a new line."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"apt -y install \\\n  build-essential \\\n  curl \\\n  git \\\n  zsh\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Or a ",(0,i.jsx)(n.code,{children:"sed"})," command that has multiple expressions, you can put each expression on a separate line."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Remove blank lines, leading and trailing whitespace on non-empty lines\nsed -E \\\n  -e '/^[[:space:]]*$/d' \\\n  -e 's/^[[:space:]]*|[[:space:]]*$//g'\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"temporary-environment-variables-varvalue-command",children:["Temporary Environment Variables ",(0,i.jsx)(n.code,{children:"VAR=value command"})]}),"\n",(0,i.jsx)(n.p,{children:"This is not super useful for scripting, but it's worth mentioning that if you set a variable and then run a command after it, the variable will only be set for that command."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"TMP_ENV_VAR=1 some_command\necho $TMP_ENV_VAR # (nothing)\n"})}),"\n",(0,i.jsx)(n.p,{children:"This syntax essentially sets the variable for the command and then unsets it after the command is run. The value is also not accessible in the command itself."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"X=1 echo $X # (nothing)\n"})}),"\n",(0,i.jsx)(n.p,{children:"Temporary environment variables, similar to cli arguments, is just another way to pass arguments to a command."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"EDITOR=nvim git commit            # opens the commit message in nvim\nNODE_ENV=production npm run build # builds the project in production mode\nUSE_SSH=true npx docusarus deploy # deploys the site using ssh\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},5658:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>c});var a=s(758);const i={},r=a.createContext(i);function l(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);