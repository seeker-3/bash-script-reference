"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[659],{3985:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>i,default:()=>o,frontMatter:()=>t,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"special-parameters","title":"Special Parameters $@","description":"Special parameters are readonly variables that are set by the shell. They are used to read positional arguments to the script and to introspect processes.","source":"@site/docs/007-special-parameters.md","sourceDirName":".","slug":"/special-parameters","permalink":"/bash-script-reference/docs/special-parameters","draft":false,"unlisted":false,"editUrl":"https://github.com/seeker-3/bash-script-reference/tree/main/docs/007-special-parameters.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{},"sidebar":"referenceSidebar","previous":{"title":"Globbing","permalink":"/bash-script-reference/docs/globbing"},"next":{"title":"Subshells ()","permalink":"/bash-script-reference/docs/subshells"}}');var a=n(6070),c=n(5658);const t={},i="Special Parameters $@",l={},d=[{value:"Command Line Arguments",id:"command-line-arguments",level:2},{value:"Command Line Arguments as an Array <code>$@</code>",id:"command-line-arguments-as-an-array-",level:3},{value:"Command Line Arguments as a String <code>$*</code>",id:"command-line-arguments-as-a-string-",level:3},{value:"Get the Number of Command Line Arguments <code>$#</code>",id:"get-the-number-of-command-line-arguments-",level:3},{value:"Access Individual Command Line Arguments <code>$n</code>",id:"access-individual-command-line-arguments-n",level:3},{value:"Get the Name of the Script <code>$0</code>",id:"get-the-name-of-the-script-0",level:3},{value:"Process Introspection",id:"process-introspection",level:2}];function h(e){const s={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,c.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(s.header,{children:(0,a.jsxs)(s.h1,{id:"special-parameters-",children:["Special Parameters ",(0,a.jsx)(s.code,{children:"$@"})]})}),"\n",(0,a.jsx)(s.p,{children:"Special parameters are readonly variables that are set by the shell. They are used to read positional arguments to the script and to introspect processes."}),"\n",(0,a.jsx)(s.h2,{id:"command-line-arguments",children:"Command Line Arguments"}),"\n",(0,a.jsxs)(s.h3,{id:"command-line-arguments-as-an-array-",children:["Command Line Arguments as an Array ",(0,a.jsx)(s.code,{children:"$@"})]}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.code,{children:"$@"})," gets all the arguments passed to the script as separate strings."]}),"\n",(0,a.jsx)(s.p,{children:"From the cli"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-bash",children:"bash script.bash 1 2 3\n"})}),"\n",(0,a.jsx)(s.p,{children:"In the script"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-bash",children:'echo "$@" # 1 2 3\n'})}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.code,{children:"@"})," is an array, so you can use any syntax listed in the array section to access the elements."]}),"\n",(0,a.jsx)(s.p,{children:"From the cli"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-bash",children:"bash script.bash 1 2 3 4 5\n"})}),"\n",(0,a.jsx)(s.p,{children:"In the script using an array slice"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-bash",children:'echo "${@:2:3}" # 2 3 4\n'})}),"\n",(0,a.jsxs)(s.p,{children:["If you use a for loop with no ",(0,a.jsx)(s.code,{children:"in"})," clause, it will iterate over the cli arguments by default."]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-bash",children:'for ARG; do\n  echo "$ARG"\ndone\n'})}),"\n",(0,a.jsxs)(s.h3,{id:"command-line-arguments-as-a-string-",children:["Command Line Arguments as a String ",(0,a.jsx)(s.code,{children:"$*"})]}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.code,{children:"$*"})," gets all the arguments passed to the script as a single string."]}),"\n",(0,a.jsx)(s.p,{children:"From the cli"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-bash",children:"bash script.bash 1 2 3\n"})}),"\n",(0,a.jsx)(s.p,{children:"In the script"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-bash",children:'echo "$*" # 1 2 3\n'})}),"\n",(0,a.jsxs)(s.h3,{id:"get-the-number-of-command-line-arguments-",children:["Get the Number of Command Line Arguments ",(0,a.jsx)(s.code,{children:"$#"})]}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.code,{children:"$#"})," gets the number of arguments passed to the script."]}),"\n",(0,a.jsx)(s.p,{children:"From the cli"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-bash",children:"bash script.bash 1 2 3\n"})}),"\n",(0,a.jsx)(s.p,{children:"In the script"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-bash",children:"echo $# # 3\n"})}),"\n",(0,a.jsxs)(s.h3,{id:"access-individual-command-line-arguments-n",children:["Access Individual Command Line Arguments ",(0,a.jsx)(s.code,{children:"$n"})]}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.code,{children:"$n"})," gets the nth argument passed to the script."]}),"\n",(0,a.jsx)(s.p,{children:"From the cli"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-bash",children:"bash script.bash 1 2 3 4 5\n"})}),"\n",(0,a.jsx)(s.p,{children:"In the script using an array slice"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-bash",children:'echo "$1 $4 $5"\n'})}),"\n",(0,a.jsxs)(s.h3,{id:"get-the-name-of-the-script-0",children:["Get the Name of the Script ",(0,a.jsx)(s.code,{children:"$0"})]}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.code,{children:"$0"})," gets the name of the script."]}),"\n",(0,a.jsx)(s.p,{children:"From the cli"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-bash",children:"bash script.bash 1 2 3\n"})}),"\n",(0,a.jsx)(s.p,{children:"In the script"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-bash",children:'echo "$0" # script.bash\n'})}),"\n",(0,a.jsx)(s.h2,{id:"process-introspection",children:"Process Introspection"}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.code,{children:"$?"})," gets the exit status of the last command."]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-bash",children:"(exit 42)\necho $? # 42\n"})}),"\n",(0,a.jsxs)(s.p,{children:["This can be useful if you are checking for a specific error status, however most of the time you should use ",(0,a.jsx)(s.code,{children:"if"})," statements to check if a command failed or not."]}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"$$"})," gets the process id of the current script."]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"$!"})," gets the process id of the last command run in the background."]}),"\n"]})]})}function o(e={}){const{wrapper:s}={...(0,c.R)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},5658:(e,s,n)=>{n.d(s,{R:()=>t,x:()=>i});var r=n(758);const a={},c=r.createContext(a);function t(e){const s=r.useContext(c);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:t(e.components),r.createElement(c.Provider,{value:s},e.children)}}}]);