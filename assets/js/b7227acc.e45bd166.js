"use strict";(self.webpackChunkbash_script_reference=self.webpackChunkbash_script_reference||[]).push([[960],{4983:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"strings","title":"Strings","description":"The only primitive datatype in bash is a string (numbers are really just strings!). There are several different ways to define strings.","source":"@site/docs/003-strings.md","sourceDirName":".","slug":"/strings","permalink":"/bash-script-reference/docs/strings","draft":false,"unlisted":false,"editUrl":"https://github.com/seeker-3/bash-script-reference/tree/main/docs/003-strings.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{},"sidebar":"referenceSidebar","previous":{"title":"Basics","permalink":"/bash-script-reference/docs/basics"},"next":{"title":"Arrays","permalink":"/bash-script-reference/docs/arrays"}}');var i=s(6070),t=s(5658);const l={},c="Strings",d={},o=[{value:"Raw Strings <code>&#39;...&#39;</code>",id:"raw-strings-",level:2},{value:"Interpolated Strings <code>&quot;...$X...&quot;</code>",id:"interpolated-strings-x",level:2},{value:"Unquoted Strings <code>hello/world</code>",id:"unquoted-strings-helloworld",level:2},{value:"ANSI-C Escape Strings <code>$&#39;...\\n&#39;</code>",id:"ansi-c-escape-strings-n",level:2},{value:"Multiline Strings",id:"multiline-strings",level:2},{value:"String Concatenation <code>+=</code>",id:"string-concatenation-",level:2},{value:"String Composition <code>&#39;...&#39;&quot;...&quot;</code>",id:"string-composition-",level:2},{value:"String Slices <code>${STRING:start:end}</code>",id:"string-slices-stringstartend",level:2},{value:"String Length",id:"string-length",level:2}];function a(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"strings",children:"Strings"})}),"\n",(0,i.jsx)(n.p,{children:"The only primitive datatype in bash is a string (numbers are really just strings!). There are several different ways to define strings."}),"\n",(0,i.jsxs)(n.h2,{id:"raw-strings-",children:["Raw Strings ",(0,i.jsx)(n.code,{children:"'...'"})]}),"\n",(0,i.jsxs)(n.p,{children:["Every character in the string is treated as a literal, no escape sequences, no variable interpolation, whitespace is preserved, ",(0,i.jsx)(n.code,{children:"~"})," does not expand."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"RAW='hello world $X'\necho \"$RAW\" # hello world $X\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"interpolated-strings-x",children:["Interpolated Strings ",(0,i.jsx)(n.code,{children:'"...$X..."'})]}),"\n",(0,i.jsxs)(n.p,{children:["Variables and ",(0,i.jsx)(n.a,{href:"subshells",children:"subshells"})," are interpolated, interpolation can be escaped, whitespace is preserved, ",(0,i.jsx)(n.code,{children:"~"})," does not expand."]}),"\n",(0,i.jsxs)(n.p,{children:["Escapable: ",(0,i.jsx)(n.code,{children:"\\$"}),", ",(0,i.jsx)(n.code,{children:'\\"'}),", ",(0,i.jsx)(n.code,{children:"\\\\"}),", `\\``"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'X=1\nINTERPOLATED="hello world $X"\necho "$INTERPOLATED" # hello world 1\n'})}),"\n",(0,i.jsxs)(n.h2,{id:"unquoted-strings-helloworld",children:["Unquoted Strings ",(0,i.jsx)(n.code,{children:"hello/world"})]}),"\n",(0,i.jsxs)(n.p,{children:["Variables and ",(0,i.jsx)(n.a,{href:"subshells",children:"subshells"})," are interpolated, ",(0,i.jsx)(n.code,{children:"~"})," at the beginning expands, whitespace is not allowed, syntax characters like ",(0,i.jsx)(n.code,{children:"("}),", ",(0,i.jsx)(n.code,{children:")"}),", ",(0,i.jsx)(n.code,{children:"<"}),", ",(0,i.jsx)(n.code,{children:">"}),", ",(0,i.jsx)(n.code,{children:"|"}),", ",(0,i.jsx)(n.code,{children:";"})," are not allowed."]}),"\n",(0,i.jsxs)(n.p,{children:["Syntax characters and whitespace can be escaped with ",(0,i.jsx)(n.code,{children:"\\"})," but it is probably better to use quoted strings instead of many escapes."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"WORLD=' world'\nEXPANDED=~/hello$WORLD\necho \"$EXPANDED\" # /home/user/hello world\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"ansi-c-escape-strings-n",children:["ANSI-C Escape Strings ",(0,i.jsx)(n.code,{children:"$'...\\n'"})]}),"\n",(0,i.jsx)(n.p,{children:"Similar to raw strings except ansi escape sequences are interpreted."}),"\n",(0,i.jsxs)(n.p,{children:["Variables are not interpolated, whitespace is preserved, ",(0,i.jsx)(n.code,{children:"~"})," is not expanded, supports standard escape sequences like ",(0,i.jsx)(n.code,{children:"\\n"}),", ",(0,i.jsx)(n.code,{children:"\\t"}),", ",(0,i.jsx)(n.code,{children:"\\r"}),", etc."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"ESCAPED=$'hello\\n world $X'\necho \"$ESCAPED\"\n# Output:\n# hello\n# world $X\n"})}),"\n",(0,i.jsx)(n.h2,{id:"multiline-strings",children:"Multiline Strings"}),"\n",(0,i.jsx)(n.p,{children:"All quoted strings by default are multiline strings."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"RAW='line1\nline2'\n\nINTERPOLATED=\"line1\nline2\"\n\nESCAPED=$'line1\nline2'\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"string-concatenation-",children:["String Concatenation ",(0,i.jsx)(n.code,{children:"+="})]}),"\n",(0,i.jsxs)(n.p,{children:["Strings can be concatenated using the ",(0,i.jsx)(n.code,{children:"+="})," operator."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"VAR=text\nVAR+=' more text'\necho \"$VAR\" # text more text\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["Bash is unique in that you can use ",(0,i.jsx)(n.code,{children:"+="})," but cannot use ",(0,i.jsx)(n.code,{children:"+"})," by itself to concatenate strings ",(0,i.jsx)(n.code,{children:"VAR=x+y"})," \u274c. Instead you would use interpolation ",(0,i.jsx)(n.code,{children:'VAR="$X$Y"'})," \u2705."]})}),"\n",(0,i.jsxs)(n.h2,{id:"string-composition-",children:["String Composition ",(0,i.jsx)(n.code,{children:"'...'\"...\""})]}),"\n",(0,i.jsx)(n.p,{children:"String types can easily be combined in one expression. This is often used if you need the properties of multiple strings at once."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"VAR=hello\nCOMBINED=~/\"$VAR\"/world/'path with spaces'/$'\\n'\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"string-slices-stringstartend",children:["String Slices ",(0,i.jsx)(n.code,{children:"${STRING:start:end}"})]}),"\n",(0,i.jsxs)(n.p,{children:["Strings can be sliced using the syntax ",(0,i.jsx)(n.code,{children:"${STRING:start:end}"})," or ",(0,i.jsx)(n.code,{children:"${STRING:start}"})," or ",(0,i.jsx)(n.code,{children:"${STRING::end}"}),". String slices support negative indexing."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'STRING=\'hello world\'\necho "${STRING::5}"   # hello\necho "${STRING:1:5}"  # ello\necho "${STRING:6}"    # world\necho "${STRING:6:-1}" # worl\n'})}),"\n",(0,i.jsx)(n.h2,{id:"string-length",children:"String Length"}),"\n",(0,i.jsxs)(n.p,{children:["Get the length of a string using the ",(0,i.jsx)(n.code,{children:"#"})," symbol."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"STRING='hello world'\necho \"${#STRING}\" # 11\n"})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},5658:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>c});var r=s(758);const i={},t=r.createContext(i);function l(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);