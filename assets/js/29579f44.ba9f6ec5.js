"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[105],{5050:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"referenceSidebar":[{"type":"link","label":"Reference Intro","href":"/bash-script-reference/docs/intro","docId":"intro","unlisted":false},{"type":"link","label":"Basics","href":"/bash-script-reference/docs/basics","docId":"basics","unlisted":false},{"type":"link","label":"Strings","href":"/bash-script-reference/docs/strings","docId":"strings","unlisted":false},{"type":"link","label":"Arrays","href":"/bash-script-reference/docs/arrays","docId":"arrays","unlisted":false},{"type":"link","label":"Associative Arrays","href":"/bash-script-reference/docs/associative-arrays","docId":"associative-arrays","unlisted":false},{"type":"link","label":"Globbing","href":"/bash-script-reference/docs/globbing","docId":"globbing","unlisted":false},{"type":"link","label":"Special Parameters $@","href":"/bash-script-reference/docs/special-parameters","docId":"special-parameters","unlisted":false},{"type":"link","label":"Subshells ()","href":"/bash-script-reference/docs/subshells","docId":"subshells","unlisted":false},{"type":"link","label":"Control Flow","href":"/bash-script-reference/docs/control-flow","docId":"control-flow","unlisted":false},{"type":"link","label":"Conditionals","href":"/bash-script-reference/docs/conditionals","docId":"conditionals","unlisted":false},{"type":"link","label":"Functions","href":"/bash-script-reference/docs/functions","docId":"functions","unlisted":false},{"type":"link","label":"Pipes","href":"/bash-script-reference/docs/pipes","docId":"pipes","unlisted":false},{"type":"link","label":"Redirects","href":"/bash-script-reference/docs/redirects","docId":"redirects","unlisted":false},{"type":"link","label":"Arithmetic ((x+=y))","href":"/bash-script-reference/docs/arithmetic","docId":"arithmetic","unlisted":false},{"type":"link","label":"Expansions","href":"/bash-script-reference/docs/expansions","docId":"expansions","unlisted":false},{"type":"link","label":"Strict Mode","href":"/bash-script-reference/docs/strict-mode","docId":"strict-mode","unlisted":false},{"type":"link","label":"Running Scripts","href":"/bash-script-reference/docs/running-scripts","docId":"running-scripts","unlisted":false},{"type":"link","label":"Bonus","href":"/bash-script-reference/docs/bonus","docId":"bonus","unlisted":false},{"type":"link","label":"Full Reference","href":"/bash-script-reference/docs/reference","docId":"reference","unlisted":false}]},"docs":{"arithmetic":{"id":"arithmetic","title":"Arithmetic ((x+=y))","description":"","sidebar":"referenceSidebar"},"arrays":{"id":"arrays","title":"Arrays","description":"Declaring Arrays ARRAY=(...)","sidebar":"referenceSidebar"},"associative-arrays":{"id":"associative-arrays","title":"Associative Arrays","description":"Associative arrays are similar to arrays except they use keys instead of indexes so nearly all the same features apply. However, associative arrays do not support an easy way to concatenated/union them together like arrays, and reading them from a string is not as straight forward.","sidebar":"referenceSidebar"},"basics":{"id":"basics","title":"Basics","description":"Comments","sidebar":"referenceSidebar"},"bonus":{"id":"bonus","title":"Bonus","description":"Adding Color to Your Bash Scripts","sidebar":"referenceSidebar"},"conditionals":{"id":"conditionals","title":"Conditionals","description":"(())","sidebar":"referenceSidebar"},"control-flow":{"id":"control-flow","title":"Control Flow","description":"Control flow in bash works very differently to other languages. Instead of branching on true or false, bash will branch on the exit status of a command. A successful command with an exit status of 0 is true, and a failed command with a non-zero exit status of 1..255 is false.","sidebar":"referenceSidebar"},"expansions":{"id":"expansions","title":"Expansions","description":"Ranges {start..stop..step}","sidebar":"referenceSidebar"},"functions":{"id":"functions","title":"Functions","description":"Defining Functions fn() { ... }","sidebar":"referenceSidebar"},"globbing":{"id":"globbing","title":"Globbing","description":"Globbing is a basic pattern matching feature that lets you match files or strings. A glob expression will expand to a list of files that match the pattern. If no files match the pattern, the glob expression will remain unexpanded.","sidebar":"referenceSidebar"},"intro":{"id":"intro","title":"Reference Intro","description":"Welcome","sidebar":"referenceSidebar"},"pipes":{"id":"pipes","title":"Pipes","description":"Pipe STDOUT to STDIN |","sidebar":"referenceSidebar"},"redirects":{"id":"redirects","title":"Redirects","description":"Read a File to STDIN <","sidebar":"referenceSidebar"},"reference":{"id":"reference","title":"Full Reference","description":"- Full Reference","sidebar":"referenceSidebar"},"running-scripts":{"id":"running-scripts","title":"Running Scripts","description":"Running Scripts as Files","sidebar":"referenceSidebar"},"special-parameters":{"id":"special-parameters","title":"Special Parameters $@","description":"Special parameters are readonly variables that are set by the shell. They are used to read positional arguments to the script and to introspect processes.","sidebar":"referenceSidebar"},"strict-mode":{"id":"strict-mode","title":"Strict Mode","description":"","sidebar":"referenceSidebar"},"strings":{"id":"strings","title":"Strings","description":"The only primitive datatype in bash is a string (numbers are really just strings!). There are several different ways to define strings.","sidebar":"referenceSidebar"},"subshells":{"id":"subshells","title":"Subshells ()","description":"Command Groups {}","sidebar":"referenceSidebar"}}}}')}}]);